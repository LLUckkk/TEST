{
  "input_header": "def _test_forward_tile(in_shape, reps, dtype):",
  "input_docstring": null,
  "output_code": "def _test_forward_tile(in_shape, reps, dtype):\n    data = np.random.uniform(-5, 5, size=in_shape).astype(dtype)\n\n    with tf.Graph().as_default():\n        in_data = array_ops.placeholder(shape=data.shape, dtype=data.dtype)\n\n        out = array_ops.tile(in_data, reps)\n\n        compare_tflite_with_tvm(data, \"Placeholder:0\", [in_data], [out])",
  "input_contexts": [
    {
      "id": "apache_tvm_16464_1",
      "input_code": "def test_forward_tile():\n    _test_forward_tile((2,), (3,), \"int32\")\n    _test_forward_tile((2, 2), (2, 3), \"float32\")\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.ops import array_ops\n\n<testcase_1>\nin_shape = (4,)\nreps = (2,)\ndtype = \"float64\"\n\n<testcase_2>\nin_shape = (3, 3)\nreps = (1, 2)\ndtype = \"int32\"\n\n<testcase_3>\nin_shape = (5, 2)\nreps = (3, 1)\ndtype = \"float32\"\n\n<testcase_4>\nin_shape = (2, 2, 2)\nreps = (2, 2, 2)\ndtype = \"int64\"\n\n<testcase_5>\nin_shape = (6,)\nreps = (4,)\ndtype = \"int32\""
  ],
  "gpt_output": "<needimport>\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.ops import array_ops\n\n<testcase_1>\nin_shape = (4,)\nreps = (2,)\ndtype = \"float64\"\n\n<testcase_2>\nin_shape = (3, 3)\nreps = (1, 2)\ndtype = \"int32\"\n\n<testcase_3>\nin_shape = (5, 2)\nreps = (3, 1)\ndtype = \"float32\"\n\n<testcase_4>\nin_shape = (2, 2, 2)\nreps = (2, 2, 2)\ndtype = \"int64\"\n\n<testcase_5>\nin_shape = (6,)\nreps = (4,)\ndtype = \"int32\"",
  "needimport": "import numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.ops import array_ops\n\n",
  "test_results": {
    "ans1": [
      -0.8934141331281769,
      -3.4490182682901347,
      4.476615213330435,
      2.6944349901146722,
      -0.8934141331281769,
      -3.4490182682901347,
      4.476615213330435,
      2.6944349901146722
    ],
    "ans2": [
      [
        1,
        -1,
        -1,
        1,
        -1,
        -1
      ],
      [
        0,
        -2,
        -4,
        0,
        -2,
        -4
      ],
      [
        0,
        -1,
        -1,
        0,
        -1,
        -1
      ]
    ],
    "ans3": [
      [
        -1.9687793254852295,
        -1.6206591129302979
      ],
      [
        -3.053663492202759,
        2.7433855533599854
      ],
      [
        -0.5579400658607483,
        2.5096960067749023
      ],
      [
        -2.9392313957214355,
        0.765504777431488
      ],
      [
        -4.538161754608154,
        4.583883285522461
      ],
      [
        -1.9687793254852295,
        -1.6206591129302979
      ],
      [
        -3.053663492202759,
        2.7433855533599854
      ],
      [
        -0.5579400658607483,
        2.5096960067749023
      ],
      [
        -2.9392313957214355,
        0.765504777431488
      ],
      [
        -4.538161754608154,
        4.583883285522461
      ],
      [
        -1.9687793254852295,
        -1.6206591129302979
      ],
      [
        -3.053663492202759,
        2.7433855533599854
      ],
      [
        -0.5579400658607483,
        2.5096960067749023
      ],
      [
        -2.9392313957214355,
        0.765504777431488
      ],
      [
        -4.538161754608154,
        4.583883285522461
      ]
    ],
    "ans4": [
      [
        [
          2,
          2,
          2,
          2
        ],
        [
          -3,
          4,
          -3,
          4
        ],
        [
          2,
          2,
          2,
          2
        ],
        [
          -3,
          4,
          -3,
          4
        ]
      ],
      [
        [
          4,
          4,
          4,
          4
        ],
        [
          0,
          4,
          0,
          4
        ],
        [
          4,
          4,
          4,
          4
        ],
        [
          0,
          4,
          0,
          4
        ]
      ],
      [
        [
          2,
          2,
          2,
          2
        ],
        [
          -3,
          4,
          -3,
          4
        ],
        [
          2,
          2,
          2,
          2
        ],
        [
          -3,
          4,
          -3,
          4
        ]
      ],
      [
        [
          4,
          4,
          4,
          4
        ],
        [
          0,
          4,
          0,
          4
        ],
        [
          4,
          4,
          4,
          4
        ],
        [
          0,
          4,
          0,
          4
        ]
      ]
    ],
    "ans5": [
      -1,
      1,
      -2,
      0,
      -1,
      4,
      -1,
      1,
      -2,
      0,
      -1,
      4,
      -1,
      1,
      -2,
      0,
      -1,
      4,
      -1,
      1,
      -2,
      0,
      -1,
      4
    ]
  }
}