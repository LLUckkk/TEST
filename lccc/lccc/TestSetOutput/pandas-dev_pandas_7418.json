{
  "input_header": "def _create_table_setup(self):",
  "input_docstring": null,
  "output_code": "    def _create_table_setup(self):\n        from sqlalchemy import (\n            Column,\n            PrimaryKeyConstraint,\n            Table,\n        )\n        from sqlalchemy.schema import MetaData\n\n        column_names_and_types = self._get_column_names_and_types(self._sqlalchemy_type)\n\n        columns: list[Any] = [\n            Column(name, typ, index=is_index)\n            for name, typ, is_index in column_names_and_types\n        ]\n\n        if self.keys is not None:\n            if not is_list_like(self.keys):\n                keys = [self.keys]\n            else:\n                keys = self.keys\n            pkc = PrimaryKeyConstraint(*keys, name=self.name + \"_pk\")\n            columns.append(pkc)\n\n        schema = self.schema or self.pd_sql.meta.schema\n\n        meta = MetaData()\n        return Table(self.name, meta, *columns, schema=schema)",
  "input_contexts": [
    {
      "id": "pandas-dev_pandas_7418_1",
      "input_code": "    def __init__(\n        self,\n        name: str,\n        pandas_sql_engine,\n        frame=None,\n        index: bool | str | list[str] | None = True,\n        if_exists: Literal[\"fail\", \"replace\", \"append\"] = \"fail\",\n        prefix: str = \"pandas\",\n        index_label=None,\n        schema=None,\n        keys=None,\n        dtype: DtypeArg | None = None,\n    ) -> None:\n        self.name = name\n        self.pd_sql = pandas_sql_engine\n        self.prefix = prefix\n        self.frame = frame\n        self.index = self._index_name(index, index_label)\n        self.schema = schema\n        self.if_exists = if_exists\n        self.keys = keys\n        self.dtype = dtype\n\n        if frame is not None:\n            self.table = self._create_table_setup()\n        else:\n            self.table = self.pd_sql.get_table(self.name, self.schema)\n\n        if self.table is None:\n            raise ValueError(f\"Could not init table '{name}'\")\n\n        if not len(self.name):\n            raise ValueError(\"Empty table name specified\")\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n<testcase_1>\nname = \"test_table\"\npandas_sql_engine = create_engine('sqlite:///:memory:')\nframe = pd.DataFrame({\"col1\": [1, 2], \"col2\": [\"a\", \"b\"]})\nindex = True\nif_exists = \"fail\"\nprefix = \"pandas\"\nindex_label = None\nschema = None\nkeys = [\"col1\"]\ndtype = {\"col1\": \"INTEGER\", \"col2\": \"TEXT\"}\n\n<testcase_2>\nname = \"sample_table\"\npandas_sql_engine = create_engine('sqlite:///:memory:')\nframe = pd.DataFrame({\"id\": [1, 2, 3], \"value\": [10.5, 20.5, 30.5]})\nindex = [\"id\"]\nif_exists = \"replace\"\nprefix = \"sample\"\nindex_label = None\nschema = \"public\"\nkeys = [\"id\"]\ndtype = {\"id\": \"INTEGER\", \"value\": \"FLOAT\"}\n\n<testcase_3>\nname = \"data_table\"\npandas_sql_engine = create_engine('postgresql://user:password@localhost/testdb')\nframe = pd.DataFrame({\"name\": [\"Alice\", \"Bob\"], \"age\": [25, 30]})\nindex = False\nif_exists = \"append\"\nprefix = \"data\"\nindex_label = None\nschema = \"public\"\nkeys = [\"name\"]\ndtype = {\"name\": \"VARCHAR\", \"age\": \"INTEGER\"}\n\n<testcase_4>\nname = \"info_table\"\npandas_sql_engine = create_engine('mysql+pymysql://user:password@localhost/testdb')\nframe = pd.DataFrame({\"id\": [1, 2], \"description\": [\"test1\", \"test2\"]})\nindex = [\"id\"]\nif_exists = \"fail\"\nprefix = \"info\"\nindex_label = None\nschema = \"test_schema\"\nkeys = [\"id\"]\ndtype = {\"id\": \"INTEGER\", \"description\": \"TEXT\"}\n\n<testcase_5>\nname = \"records_table\"\npandas_sql_engine = create_engine('sqlite:///:memory:')\nframe = pd.DataFrame({\"record_id\": [100, 200], \"record_value\": [5.5, 6.5]})\nindex = [\"record_id\"]\nif_exists = \"replace\"\nprefix = \"records\"\nindex_label = None\nschema = None\nkeys = [\"record_id\"]\ndtype = {\"record_id\": \"INTEGER\", \"record_value\": \"FLOAT\"}"
  ],
  "gpt_output": "<needimport>\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n<testcase_1>\nname = \"test_table\"\npandas_sql_engine = create_engine('sqlite:///:memory:')\nframe = pd.DataFrame({\"col1\": [1, 2], \"col2\": [\"a\", \"b\"]})\nindex = True\nif_exists = \"fail\"\nprefix = \"pandas\"\nindex_label = None\nschema = None\nkeys = [\"col1\"]\ndtype = {\"col1\": \"INTEGER\", \"col2\": \"TEXT\"}\n\n<testcase_2>\nname = \"sample_table\"\npandas_sql_engine = create_engine('sqlite:///:memory:')\nframe = pd.DataFrame({\"id\": [1, 2, 3], \"value\": [10.5, 20.5, 30.5]})\nindex = [\"id\"]\nif_exists = \"replace\"\nprefix = \"sample\"\nindex_label = None\nschema = \"public\"\nkeys = [\"id\"]\ndtype = {\"id\": \"INTEGER\", \"value\": \"FLOAT\"}\n\n<testcase_3>\nname = \"data_table\"\npandas_sql_engine = create_engine('postgresql://user:password@localhost/testdb')\nframe = pd.DataFrame({\"name\": [\"Alice\", \"Bob\"], \"age\": [25, 30]})\nindex = False\nif_exists = \"append\"\nprefix = \"data\"\nindex_label = None\nschema = \"public\"\nkeys = [\"name\"]\ndtype = {\"name\": \"VARCHAR\", \"age\": \"INTEGER\"}\n\n<testcase_4>\nname = \"info_table\"\npandas_sql_engine = create_engine('mysql+pymysql://user:password@localhost/testdb')\nframe = pd.DataFrame({\"id\": [1, 2], \"description\": [\"test1\", \"test2\"]})\nindex = [\"id\"]\nif_exists = \"fail\"\nprefix = \"info\"\nindex_label = None\nschema = \"test_schema\"\nkeys = [\"id\"]\ndtype = {\"id\": \"INTEGER\", \"description\": \"TEXT\"}\n\n<testcase_5>\nname = \"records_table\"\npandas_sql_engine = create_engine('sqlite:///:memory:')\nframe = pd.DataFrame({\"record_id\": [100, 200], \"record_value\": [5.5, 6.5]})\nindex = [\"record_id\"]\nif_exists = \"replace\"\nprefix = \"records\"\nindex_label = None\nschema = None\nkeys = [\"record_id\"]\ndtype = {\"record_id\": \"INTEGER\", \"record_value\": \"FLOAT\"}",
  "needimport": "import pandas as pd\nfrom sqlalchemy import create_engine\n\n",
  "test_results": {
    "ans1": "test_table",
    "ans2": "public.sample_table",
    "ans3": "public.data_table",
    "ans4": "test_schema.info_table",
    "ans5": "records_table"
  }
}