{
  "input_header": "def _constructor_from_mgr(self, mgr, axes):",
  "input_docstring": null,
  "output_code": "    def _constructor_from_mgr(self, mgr, axes):\n        ser = Series._from_mgr(mgr, axes=axes)\n        ser._name = None\n\n        if type(self) is Series:\n            return ser\n\n        return self._constructor(ser)",
  "input_contexts": [
    {
      "id": "pandas-dev_pandas_5801_2",
      "input_code": "    def _get_rows_with_mask(self, indexer: npt.NDArray[np.bool_]) -> Series:\n        new_mgr = self._mgr.get_rows_with_mask(indexer)\n        return self._constructor_from_mgr(new_mgr, axes=new_mgr.axes).__finalize__(self)\n"
    },
    {
      "id": "pandas-dev_pandas_5801_3",
      "input_code": "    def round(self, decimals: int = 0, *args, **kwargs) -> Series:\n        \n        nv.validate_round(args, kwargs)\n        new_mgr = self._mgr.round(decimals=decimals)\n        return self._constructor_from_mgr(new_mgr, axes=new_mgr.axes).__finalize__(\n            self, method=\"round\"\n        )\n"
    },
    {
      "id": "pandas-dev_pandas_5801_4",
      "input_code": "    def test_categorical_block_pickle(self):\n        mgr = create_mgr(\"a: category\")\n        mgr2 = tm.round_trip_pickle(mgr)\n        tm.assert_frame_equal(\n            DataFrame._from_mgr(mgr, axes=mgr.axes),\n            DataFrame._from_mgr(mgr2, axes=mgr2.axes),\n        )\n\n        smgr = create_single_mgr(\"category\")\n        smgr2 = tm.round_trip_pickle(smgr)\n        tm.assert_series_equal(\n            Series()._constructor_from_mgr(smgr, axes=smgr.axes),\n            Series()._constructor_from_mgr(smgr2, axes=smgr2.axes),\n        )\n"
    },
    {
      "id": "pandas-dev_pandas_5801_1",
      "input_code": "    def _slice(self, slobj: slice, axis: AxisInt = 0) -> Series:\n        mgr = self._mgr.get_slice(slobj, axis=axis)\n        out = self._constructor_from_mgr(mgr, axes=mgr.axes)\n        out._name = self._name\n        return out.__finalize__(self)\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport pandas as pd\nimport numpy as np\n\n<testcase_1>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([1, 2, 3]), placement=slice(0, 3))], [pd.Index(['a', 'b', 'c'])])\naxes = [pd.Index(['a', 'b', 'c'])]\n\n<testcase_2>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([4, 5, 6]), placement=slice(0, 3))], [pd.Index(['x', 'y', 'z'])])\naxes = [pd.Index(['x', 'y', 'z'])]\n\n<testcase_3>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([7, 8, 9]), placement=slice(0, 3))], [pd.Index(['foo', 'bar', 'baz'])])\naxes = [pd.Index(['foo', 'bar', 'baz'])]\n\n<testcase_4>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([10, 11, 12]), placement=slice(0, 3))], [pd.Index(['one', 'two', 'three'])])\naxes = [pd.Index(['one', 'two', 'three'])]\n\n<testcase_5>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([13, 14, 15]), placement=slice(0, 3))], [pd.Index(['alpha', 'beta', 'gamma'])])\naxes = [pd.Index(['alpha', 'beta', 'gamma'])]"
  ],
  "gpt_output": "<needimport>\nimport pandas as pd\nimport numpy as np\n\n<testcase_1>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([1, 2, 3]), placement=slice(0, 3))], [pd.Index(['a', 'b', 'c'])])\naxes = [pd.Index(['a', 'b', 'c'])]\n\n<testcase_2>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([4, 5, 6]), placement=slice(0, 3))], [pd.Index(['x', 'y', 'z'])])\naxes = [pd.Index(['x', 'y', 'z'])]\n\n<testcase_3>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([7, 8, 9]), placement=slice(0, 3))], [pd.Index(['foo', 'bar', 'baz'])])\naxes = [pd.Index(['foo', 'bar', 'baz'])]\n\n<testcase_4>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([10, 11, 12]), placement=slice(0, 3))], [pd.Index(['one', 'two', 'three'])])\naxes = [pd.Index(['one', 'two', 'three'])]\n\n<testcase_5>\nmgr = pd.core.internals.BlockManager([pd.core.internals.make_block(np.array([13, 14, 15]), placement=slice(0, 3))], [pd.Index(['alpha', 'beta', 'gamma'])])\naxes = [pd.Index(['alpha', 'beta', 'gamma'])]",
  "needimport": "import pandas as pd\nimport numpy as np\n\n",
  "test_results": {
    "ans1": null,
    "ans2": null,
    "ans3": null,
    "ans4": null,
    "ans5": null
  }
}