{
  "input_header": "def get_clean_username(user):",
  "input_docstring": null,
  "output_code": "def get_clean_username(user):\n    try:\n        username = force_str(user)\n    except AttributeError:\n        username = \"anonymous\"\n    else:\n        if len(username) > PAGE_USERNAME_MAX_LENGTH:\n            username = f'{username[:PAGE_USERNAME_MAX_LENGTH - 15]}... (id={user.pk})'\n    return username",
  "input_contexts": [
    {
      "id": "django-cms_django-cms_2841_1",
      "input_code": "    def set_as_homepage(self, user=None):\n        \n        if user:\n            changed_by = get_clean_username(user)\n        else:\n            changed_by = constants.SCRIPT_USERNAME\n\n        changed_date = now()\n\n        try:\n            old_home = self.__class__.objects.get(\n                is_home=True,\n                site=self.site_id,\n            )\n        except self.__class__.DoesNotExist:\n            old_home_tree = []\n        else:\n            old_home.update(\n                is_home=False,\n                changed_by=changed_by,\n                changed_date=changed_date,\n            )\n            old_home_tree = old_home._set_title_root_path()\n\n        self.update(\n            is_home=True,\n            changed_by=changed_by,\n            changed_date=changed_date,\n        )\n        new_home_tree = self._remove_title_root_path()\n        return (new_home_tree, old_home_tree)\n"
    },
    {
      "id": "django-cms_django-cms_2841_3",
      "input_code": "def create_page(title, template, language, menu_title=None, slug=None,\n                apphook=None, apphook_namespace=None, redirect=None, meta_description=None,\n                created_by='python-api', parent=None,\n                publication_date=None, publication_end_date=None,\n                in_navigation=False, soft_root=False, reverse_id=None,\n                navigation_extenders=None, published=None, site=None,\n                login_required=False, limit_visibility_in_menu=constants.VISIBILITY_ALL,\n                position=\"last-child\", overwrite_url=None,\n                xframe_options=constants.X_FRAME_OPTIONS_INHERIT):\n    \n    if published is not None or publication_date is not None or publication_end_date is not None:\n        warnings.warn('This API function no longer accepts a \"published\", \"publication_date\", or '\n                      '\"publication_end_date\" argument', UserWarning, stacklevel=2)\n\n    if not template == TEMPLATE_INHERITANCE_MAGIC:\n        assert template in [tpl[0] for tpl in get_cms_setting('TEMPLATES')]\n        get_template(template)\n\n    if not site:\n        site = get_current_site()\n    else:\n        assert isinstance(site, Site)\n\n    assert language in get_language_list(site), get_cms_setting('LANGUAGES').get(site.pk)\n\n    if parent:\n        assert isinstance(parent, Page)\n\n    if navigation_extenders:\n        raw_menus = menu_pool.get_menus_by_attribute(\"cms_enabled\", True)\n        menus = [menu[0] for menu in raw_menus]\n        assert navigation_extenders in menus\n\n    accepted_limitations = (constants.VISIBILITY_ALL, constants.VISIBILITY_USERS, constants.VISIBILITY_ANONYMOUS)\n    assert limit_visibility_in_menu in accepted_limitations\n\n    assert position in ('last-child', 'first-child', 'left', 'right')\n\n    if apphook:\n        application_urls = _verify_apphook(apphook, apphook_namespace)\n    else:\n        application_urls = None\n\n    if created_by and isinstance(created_by, get_user_model()):\n        _thread_locals.user = created_by\n        created_by = get_clean_username(created_by)\n    else:\n        _thread_locals.user = None\n\n    if reverse_id:\n        if Page.objects.filter(reverse_id=reverse_id, site=site).exists():\n            raise FieldError('A page with the reverse_id=\"%s\" already exist.' % reverse_id)\n\n    page = Page(\n        parent=parent,\n        created_by=created_by,\n        changed_by=created_by,\n        reverse_id=reverse_id,\n        navigation_extenders=navigation_extenders,\n        application_urls=application_urls,\n        application_namespace=apphook_namespace,\n        login_required=login_required,\n        site=site,\n    )\n    page.add_to_tree(position=position)\n    page.save()\n\n    create_page_content(\n        language=language,\n        title=title,\n        menu_title=menu_title,\n        slug=slug,\n        created_by=created_by,\n        redirect=redirect,\n        meta_description=meta_description,\n        page=page,\n        overwrite_url=overwrite_url,\n        soft_root=soft_root,\n        in_navigation=in_navigation,\n        template=template,\n        limit_visibility_in_menu=limit_visibility_in_menu,\n        xframe_options=xframe_options,\n    )\n\n    del _thread_locals.user\n    return page\n"
    },
    {
      "id": "django-cms_django-cms_2841_2",
      "input_code": "    def save(self, commit=True):\n        operation_token = send_pre_page_operation(\n            request=self._request,\n            operation=CHANGE_PAGE_TRANSLATION,\n            language=self._language,\n        )\n\n        data = self.cleaned_data.copy()\n        page = self.instance.page\n        page_slug = data.pop(\"slug\", None)\n        page_path = data.pop(\"path\", None)\n        page_overwrite_url = data.pop(\"overwrite_url\", None)\n        page_content = super().save(commit=False)\n        page_content.update(\n            changed_by=get_clean_username(self._request.user),\n            changed_date=timezone.now(),\n            **data,\n        )\n        page.update_urls(\n            self._language,\n            path=page_path,\n            slug=page_slug,\n            managed=not bool(page_overwrite_url),\n        )\n        page._update_url_path_recursive(self._language)\n        page.clear_cache(menu=True)\n\n        if page.application_urls and \"slug\" in self.changed_data:\n            set_restart_trigger()\n        send_post_page_operation(\n            request=self._request,\n            operation=CHANGE_PAGE_TRANSLATION,\n            token=operation_token,\n            obj=page,\n            language=self._language,\n        )\n        return page_content\n"
    },
    {
      "id": "django-cms_django-cms_2841_5",
      "input_code": "def get_current_user_name():\n    current_user = get_current_user()\n\n    if not current_user:\n        return SCRIPT_USERNAME\n    return get_clean_username(current_user)\n"
    },
    {
      "id": "django-cms_django-cms_2841_4",
      "input_code": "def create_page_content(language, title, page, menu_title=None, slug=None,\n                        redirect=None, meta_description=None, parent=None,\n                        overwrite_url=None, page_title=None, path=None,\n                        created_by='python-api', soft_root=False, in_navigation=False,\n                        template=TEMPLATE_INHERITANCE_MAGIC,\n                        limit_visibility_in_menu=constants.VISIBILITY_ALL,\n                        xframe_options=constants.X_FRAME_OPTIONS_INHERIT):\n    \n    if not template == TEMPLATE_INHERITANCE_MAGIC:\n        assert template in [tpl[0] for tpl in get_cms_setting('TEMPLATES')]\n        get_template(template)\n\n    assert isinstance(page, Page)\n\n    assert language in get_language_list(page.site_id)\n\n    accepted_limitations = (constants.VISIBILITY_ALL, constants.VISIBILITY_USERS, constants.VISIBILITY_ANONYMOUS)\n    assert limit_visibility_in_menu in accepted_limitations\n\n    if not slug:\n        base = page.get_path_for_slug(slugify(title), language)\n        slug = get_available_slug(page.site, base, language)\n\n    if overwrite_url:\n        path = overwrite_url.strip('/')\n    elif path is None:\n        path = page.get_path_for_slug(slug, language)\n\n    if created_by and isinstance(created_by, get_user_model()):\n        _thread_locals.user = created_by\n        created_by = get_clean_username(created_by)\n\n    page.urls.update_or_create(\n        page=page,\n        language=language,\n        defaults=dict(slug=slug, path=path,  managed=not bool(overwrite_url)),\n    )\n\n    user = getattr(_thread_locals, \"user\", \"unknown user\")\n    page_content = PageContent.objects.with_user(user).create(\n        language=language,\n        title=title,\n        menu_title=menu_title,\n        page_title=page_title,\n        redirect=redirect,\n        meta_description=meta_description,\n        page=page,\n        created_by=created_by,\n        changed_by=created_by,\n        soft_root=soft_root,\n        in_navigation=in_navigation,\n        template=template,\n        limit_visibility_in_menu=limit_visibility_in_menu,\n        xframe_options=xframe_options,\n    )\n    page_content.rescan_placeholders()\n    page._clear_internal_cache()\n\n    return page_content\n"
    }
  ],
  "generated_inputs": [
    "```\n<needimport>\nimport types\n\n<testcase_1>\nuser = types.SimpleNamespace(pk=1, __str__=lambda self: \"john_doe\")\n\n<testcase_2>\nuser = types.SimpleNamespace(pk=2, __str__=lambda self: \"a_very_long_username_that_exceeds_the_maximum_length\")\n\n<testcase_3>\nuser = types.SimpleNamespace(pk=3, __str__=lambda self: \"shortname\")\n\n<testcase_4>\nuser = types.SimpleNamespace(pk=4, __str__=lambda self: \"another_user\")\n\n<testcase_5>\nuser = None\n```"
  ],
  "gpt_output": "```\n<needimport>\nimport types\n\n<testcase_1>\nuser = types.SimpleNamespace(pk=1, __str__=lambda self: \"john_doe\")\n\n<testcase_2>\nuser = types.SimpleNamespace(pk=2, __str__=lambda self: \"a_very_long_username_that_exceeds_the_maximum_length\")\n\n<testcase_3>\nuser = types.SimpleNamespace(pk=3, __str__=lambda self: \"shortname\")\n\n<testcase_4>\nuser = types.SimpleNamespace(pk=4, __str__=lambda self: \"another_user\")\n\n<testcase_5>\nuser = None\n```",
  "needimport": "import types\n\n",
  "test_results": {
    "ans1": "namespace(pk=1,... (id=1)",
    "ans2": "namespace(pk=2,... (id=2)",
    "ans3": "namespace(pk=3,... (id=3)",
    "ans4": "namespace(pk=4,... (id=4)",
    "ans5": "None"
  }
}