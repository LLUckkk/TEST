{
  "input_header": "def _h_arrows(self, length):",
  "input_docstring": "Length is in arrow width units.",
  "output_code": "    def _h_arrows(self, length):\n        \n        minsh = self.minshaft * self.headlength\n        N = len(length)\n        length = length.reshape(N, 1)\n        np.clip(length, 0, 2 ** 16, out=length)\n        x = np.array([0, -self.headaxislength,\n                      -self.headlength, 0],\n                     np.float64)\n        x = x + np.array([0, 1, 1, 1]) * length\n        y = 0.5 * np.array([1, 1, self.headwidth, 0], np.float64)\n        y = np.repeat(y[np.newaxis, :], N, axis=0)\n        x0 = np.array([0, minsh - self.headaxislength,\n                       minsh - self.headlength, minsh], np.float64)\n        y0 = 0.5 * np.array([1, 1, self.headwidth, 0], np.float64)\n        ii = [0, 1, 2, 3, 2, 1, 0, 0]\n        X = x[:, ii]\n        Y = y[:, ii]\n        Y[:, 3:-1] *= -1\n        X0 = x0[ii]\n        Y0 = y0[ii]\n        Y0[3:-1] *= -1\n        shrink = length / minsh if minsh != 0. else 0.\n        X0 = shrink * X0[np.newaxis, :]\n        Y0 = shrink * Y0[np.newaxis, :]\n        short = np.repeat(length < minsh, 8, axis=1)\n        np.copyto(X, X0, where=short)\n        np.copyto(Y, Y0, where=short)\n        if self.pivot == 'middle':\n            X -= 0.5 * X[:, 3, np.newaxis]\n        elif self.pivot == 'tip':\n            X = X - X[:, 3, np.newaxis]\n        elif self.pivot != 'tail':\n            _api.check_in_list([\"middle\", \"tip\", \"tail\"], pivot=self.pivot)\n\n        tooshort = length < self.minlength\n        if tooshort.any():\n            th = np.arange(0, 8, 1, np.float64) * (np.pi / 3.0)\n            x1 = np.cos(th) * self.minlength * 0.5\n            y1 = np.sin(th) * self.minlength * 0.5\n            X1 = np.repeat(x1[np.newaxis, :], N, axis=0)\n            Y1 = np.repeat(y1[np.newaxis, :], N, axis=0)\n            tooshort = np.repeat(tooshort, 8, 1)\n            np.copyto(X, X1, where=tooshort)\n            np.copyto(Y, Y1, where=tooshort)\n        return X, Y",
  "input_contexts": [
    {
      "id": "krishnaik06_The-Grand-Complete-Data-Science-Materials_31363_1",
      "input_code": "    def _make_verts(self, U, V, angles):\n        uv = (U + V * 1j)\n        str_angles = angles if isinstance(angles, str) else ''\n        if str_angles == 'xy' and self.scale_units == 'xy':\n            angles, lengths = self._angles_lengths(U, V, eps=1)\n        elif str_angles == 'xy' or self.scale_units == 'xy':\n            eps = np.abs(self.axes.dataLim.extents).max() * 0.001\n            angles, lengths = self._angles_lengths(U, V, eps=eps)\n        if str_angles and self.scale_units == 'xy':\n            a = lengths\n        else:\n            a = np.abs(uv)\n        if self.scale is None:\n            sn = max(10, math.sqrt(self.N))\n            if self.Umask is not ma.nomask:\n                amean = a[~self.Umask].mean()\n            else:\n                amean = a.mean()\n            scale = 1.8 * amean * sn / self.span\n        if self.scale_units is None:\n            if self.scale is None:\n                self.scale = scale\n            widthu_per_lenu = 1.0\n        else:\n            if self.scale_units == 'xy':\n                dx = 1\n            else:\n                dx = self._dots_per_unit(self.scale_units)\n            widthu_per_lenu = dx / self._trans_scale\n            if self.scale is None:\n                self.scale = scale * widthu_per_lenu\n        length = a * (widthu_per_lenu / (self.scale * self.width))\n        X, Y = self._h_arrows(length)\n        if str_angles == 'xy':\n            theta = angles\n        elif str_angles == 'uv':\n            theta = np.angle(uv)\n        else:\n            theta = ma.masked_invalid(np.deg2rad(angles)).filled(0)\n        theta = theta.reshape((-1, 1))\n        xy = (X + Y * 1j) * np.exp(1j * theta) * self.width\n        XY = np.stack((xy.real, xy.imag), axis=2)\n        if self.Umask is not ma.nomask:\n            XY = ma.array(XY)\n            XY[self.Umask] = ma.masked\n\n        return XY\n"
    }
  ],
  "generated_inputs": [
    "```python\n<needimport>\nimport numpy as np\n\n<testcase_1>\nlength = np.array([10, 20, 30, 40, 50], dtype=np.float64)\n\n<testcase_2>\nlength = np.array([5, 15, 25, 35, 45, 55, 65], dtype=np.float64)\n\n<testcase_3>\nlength = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float64)\n\n<testcase_4>\nlength = np.array([100, 200, 300, 400, 500, 600, 700, 800], dtype=np.float64)\n\n<testcase_5>\nlength = np.array([0.1, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5], dtype=np.float64)\n```"
  ],
  "gpt_output": "```python\n<needimport>\nimport numpy as np\n\n<testcase_1>\nlength = np.array([10, 20, 30, 40, 50], dtype=np.float64)\n\n<testcase_2>\nlength = np.array([5, 15, 25, 35, 45, 55, 65], dtype=np.float64)\n\n<testcase_3>\nlength = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float64)\n\n<testcase_4>\nlength = np.array([100, 200, 300, 400, 500, 600, 700, 800], dtype=np.float64)\n\n<testcase_5>\nlength = np.array([0.1, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5], dtype=np.float64)\n```",
  "needimport": "import numpy as np\n\n",
  "test_results": {
    "ans1": [
      [
        [
          0.0,
          8.0,
          5.0,
          10.0,
          5.0,
          8.0,
          0.0,
          0.0
        ],
        [
          0.0,
          18.0,
          15.0,
          20.0,
          15.0,
          18.0,
          0.0,
          0.0
        ],
        [
          0.0,
          28.0,
          25.0,
          30.0,
          25.0,
          28.0,
          0.0,
          0.0
        ],
        [
          0.0,
          38.0,
          35.0,
          40.0,
          35.0,
          38.0,
          0.0,
          0.0
        ],
        [
          0.0,
          48.0,
          45.0,
          50.0,
          45.0,
          48.0,
          0.0,
          0.0
        ]
      ],
      [
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ]
      ]
    ],
    "ans2": [
      [
        [
          0.0,
          3.0,
          0.0,
          5.0,
          0.0,
          3.0,
          0.0,
          0.0
        ],
        [
          0.0,
          13.0,
          10.0,
          15.0,
          10.0,
          13.0,
          0.0,
          0.0
        ],
        [
          0.0,
          23.0,
          20.0,
          25.0,
          20.0,
          23.0,
          0.0,
          0.0
        ],
        [
          0.0,
          33.0,
          30.0,
          35.0,
          30.0,
          33.0,
          0.0,
          0.0
        ],
        [
          0.0,
          43.0,
          40.0,
          45.0,
          40.0,
          43.0,
          0.0,
          0.0
        ],
        [
          0.0,
          53.0,
          50.0,
          55.0,
          50.0,
          53.0,
          0.0,
          0.0
        ],
        [
          0.0,
          63.0,
          60.0,
          65.0,
          60.0,
          63.0,
          0.0,
          0.0
        ]
      ],
      [
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ]
      ]
    ],
    "ans3": [
      [
        [
          0.0,
          0.2,
          -1.0,
          1.0,
          -1.0,
          0.2,
          0.0,
          0.0
        ],
        [
          0.0,
          0.4,
          -2.0,
          2.0,
          -2.0,
          0.4,
          0.0,
          0.0
        ],
        [
          0.0,
          1.0,
          -2.0,
          3.0,
          -2.0,
          1.0,
          0.0,
          0.0
        ],
        [
          0.0,
          2.0,
          -1.0,
          4.0,
          -1.0,
          2.0,
          0.0,
          0.0
        ],
        [
          0.0,
          3.0,
          0.0,
          5.0,
          0.0,
          3.0,
          0.0,
          0.0
        ],
        [
          0.0,
          4.0,
          1.0,
          6.0,
          1.0,
          4.0,
          0.0,
          0.0
        ],
        [
          0.0,
          5.0,
          2.0,
          7.0,
          2.0,
          5.0,
          0.0,
          0.0
        ],
        [
          0.0,
          6.0,
          3.0,
          8.0,
          3.0,
          6.0,
          0.0,
          0.0
        ],
        [
          0.0,
          7.0,
          4.0,
          9.0,
          4.0,
          7.0,
          0.0,
          0.0
        ],
        [
          0.0,
          8.0,
          5.0,
          10.0,
          5.0,
          8.0,
          0.0,
          0.0
        ]
      ],
      [
        [
          0.2,
          0.2,
          0.2,
          -0.0,
          -0.2,
          -0.2,
          -0.2,
          0.2
        ],
        [
          0.4,
          0.4,
          0.4,
          -0.0,
          -0.4,
          -0.4,
          -0.4,
          0.4
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ]
      ]
    ],
    "ans4": [
      [
        [
          0.0,
          98.0,
          95.0,
          100.0,
          95.0,
          98.0,
          0.0,
          0.0
        ],
        [
          0.0,
          198.0,
          195.0,
          200.0,
          195.0,
          198.0,
          0.0,
          0.0
        ],
        [
          0.0,
          298.0,
          295.0,
          300.0,
          295.0,
          298.0,
          0.0,
          0.0
        ],
        [
          0.0,
          398.0,
          395.0,
          400.0,
          395.0,
          398.0,
          0.0,
          0.0
        ],
        [
          0.0,
          498.0,
          495.0,
          500.0,
          495.0,
          498.0,
          0.0,
          0.0
        ],
        [
          0.0,
          598.0,
          595.0,
          600.0,
          595.0,
          598.0,
          0.0,
          0.0
        ],
        [
          0.0,
          698.0,
          695.0,
          700.0,
          695.0,
          698.0,
          0.0,
          0.0
        ],
        [
          0.0,
          798.0,
          795.0,
          800.0,
          795.0,
          798.0,
          0.0,
          0.0
        ]
      ],
      [
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ]
      ]
    ],
    "ans5": [
      [
        [
          0.5,
          0.25000000000000006,
          -0.2499999999999999,
          -0.5,
          -0.2500000000000002,
          0.24999999999999967,
          0.5,
          0.2500000000000002
        ],
        [
          0.5,
          0.25000000000000006,
          -0.2499999999999999,
          -0.5,
          -0.2500000000000002,
          0.24999999999999967,
          0.5,
          0.2500000000000002
        ],
        [
          0.0,
          0.3,
          -1.5,
          1.5,
          -1.5,
          0.3,
          0.0,
          0.0
        ],
        [
          0.0,
          0.5,
          -2.5,
          2.5,
          -2.5,
          0.5,
          0.0,
          0.0
        ],
        [
          0.0,
          1.5,
          -1.5,
          3.5,
          -1.5,
          1.5,
          0.0,
          0.0
        ],
        [
          0.0,
          2.5,
          -0.5,
          4.5,
          -0.5,
          2.5,
          0.0,
          0.0
        ],
        [
          0.0,
          3.5,
          0.5,
          5.5,
          0.5,
          3.5,
          0.0,
          0.0
        ]
      ],
      [
        [
          0.0,
          0.4330127018922193,
          0.43301270189221935,
          6.123233995736766e-17,
          -0.43301270189221924,
          -0.4330127018922195,
          -1.2246467991473532e-16,
          0.4330127018922192
        ],
        [
          0.0,
          0.4330127018922193,
          0.43301270189221935,
          6.123233995736766e-17,
          -0.43301270189221924,
          -0.4330127018922195,
          -1.2246467991473532e-16,
          0.4330127018922192
        ],
        [
          0.3,
          0.3,
          0.3,
          -0.0,
          -0.3,
          -0.3,
          -0.3,
          0.3
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ],
        [
          0.5,
          0.5,
          0.5,
          -0.0,
          -0.5,
          -0.5,
          -0.5,
          0.5
        ]
      ]
    ]
  }
}