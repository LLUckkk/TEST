{
  "input_header": "def vars2fortran(block, vars, args, tab='', as_interface=False):",
  "input_docstring": "TODO:\npublic sub\n...",
  "output_code": "def vars2fortran(block, vars, args, tab='', as_interface=False):\n    \n    setmesstext(block)\n    ret = ''\n    nout = []\n    for a in args:\n        if a in block['vars']:\n            nout.append(a)\n    if 'commonvars' in block:\n        for a in block['commonvars']:\n            if a in vars:\n                if a not in nout:\n                    nout.append(a)\n            else:\n                errmess(\n                    'vars2fortran: Confused?!: \"%s\" is not defined in vars.\\n' % a)\n    if 'varnames' in block:\n        nout.extend(block['varnames'])\n    if not as_interface:\n        for a in list(vars.keys()):\n            if a not in nout:\n                nout.append(a)\n    for a in nout:\n        if 'depend' in vars[a]:\n            for d in vars[a]['depend']:\n                if d in vars and 'depend' in vars[d] and a in vars[d]['depend']:\n                    errmess(\n                        'vars2fortran: Warning: cross-dependence between variables \"%s\" and \"%s\"\\n' % (a, d))\n        if 'externals' in block and a in block['externals']:\n            if isintent_callback(vars[a]):\n                ret = '%s%sintent(callback) %s' % (ret, tab, a)\n            ret = '%s%sexternal %s' % (ret, tab, a)\n            if isoptional(vars[a]):\n                ret = '%s%soptional %s' % (ret, tab, a)\n            if a in vars and 'typespec' not in vars[a]:\n                continue\n            cont = 1\n            for b in block['body']:\n                if a == b['name'] and b['block'] == 'function':\n                    cont = 0\n                    break\n            if cont:\n                continue\n        if a not in vars:\n            show(vars)\n            outmess('vars2fortran: No definition for argument \"%s\".\\n' % a)\n            continue\n        if a == block['name']:\n            if block['block'] != 'function' or block.get('result'):\n                continue\n        if 'typespec' not in vars[a]:\n            if 'attrspec' in vars[a] and 'external' in vars[a]['attrspec']:\n                if a in args:\n                    ret = '%s%sexternal %s' % (ret, tab, a)\n                continue\n            show(vars[a])\n            outmess('vars2fortran: No typespec for argument \"%s\".\\n' % a)\n            continue\n        vardef = vars[a]['typespec']\n        if vardef == 'type' and 'typename' in vars[a]:\n            vardef = '%s(%s)' % (vardef, vars[a]['typename'])\n        selector = {}\n        if 'kindselector' in vars[a]:\n            selector = vars[a]['kindselector']\n        elif 'charselector' in vars[a]:\n            selector = vars[a]['charselector']\n        if '*' in selector:\n            if selector['*'] in ['*', ':']:\n                vardef = '%s*(%s)' % (vardef, selector['*'])\n            else:\n                vardef = '%s*%s' % (vardef, selector['*'])\n        else:\n            if 'len' in selector:\n                vardef = '%s(len=%s' % (vardef, selector['len'])\n                if 'kind' in selector:\n                    vardef = '%s,kind=%s)' % (vardef, selector['kind'])\n                else:\n                    vardef = '%s)' % (vardef)\n            elif 'kind' in selector:\n                vardef = '%s(kind=%s)' % (vardef, selector['kind'])\n        c = ' '\n        if 'attrspec' in vars[a]:\n            attr = [l for l in vars[a]['attrspec']\n                    if l not in ['external']]\n            if as_interface and 'intent(in)' in attr and 'intent(out)' in attr:\n                attr.remove('intent(out)')\n            if attr:\n                vardef = '%s, %s' % (vardef, ','.join(attr))\n                c = ','\n        if 'dimension' in vars[a]:\n            vardef = '%s%sdimension(%s)' % (\n                vardef, c, ','.join(vars[a]['dimension']))\n            c = ','\n        if 'intent' in vars[a]:\n            lst = true_intent_list(vars[a])\n            if lst:\n                vardef = '%s%sintent(%s)' % (vardef, c, ','.join(lst))\n            c = ','\n        if 'check' in vars[a]:\n            vardef = '%s%scheck(%s)' % (vardef, c, ','.join(vars[a]['check']))\n            c = ','\n        if 'depend' in vars[a]:\n            vardef = '%s%sdepend(%s)' % (\n                vardef, c, ','.join(vars[a]['depend']))\n            c = ','\n        if '=' in vars[a]:\n            v = vars[a]['=']\n            if vars[a]['typespec'] in ['complex', 'double complex']:\n                try:\n                    v = eval(v)\n                    v = '(%s,%s)' % (v.real, v.imag)\n                except Exception:\n                    pass\n            vardef = '%s :: %s=%s' % (vardef, a, v)\n        else:\n            vardef = '%s :: %s' % (vardef, a)\n        ret = '%s%s%s' % (ret, tab, vardef)\n    return ret",
  "input_contexts": [
    {
      "id": "krishnaik06_The-Grand-Complete-Data-Science-Materials_49077_1",
      "input_code": "def crack2fortrangen(block, tab='\\n', as_interface=False):\n    global skipfuncs, onlyfuncs\n\n    setmesstext(block)\n    ret = ''\n    if isinstance(block, list):\n        for g in block:\n            if g and g['block'] in ['function', 'subroutine']:\n                if g['name'] in skipfuncs:\n                    continue\n                if onlyfuncs and g['name'] not in onlyfuncs:\n                    continue\n            ret = ret + crack2fortrangen(g, tab, as_interface=as_interface)\n        return ret\n    prefix = ''\n    name = ''\n    args = ''\n    blocktype = block['block']\n    if blocktype == 'program':\n        return ''\n    argsl = []\n    if 'name' in block:\n        name = block['name']\n    if 'args' in block:\n        vars = block['vars']\n        for a in block['args']:\n            a = expr2name(a, block, argsl)\n            if not isintent_callback(vars[a]):\n                argsl.append(a)\n        if block['block'] == 'function' or argsl:\n            args = '(%s)' % ','.join(argsl)\n    f2pyenhancements = ''\n    if 'f2pyenhancements' in block:\n        for k in list(block['f2pyenhancements'].keys()):\n            f2pyenhancements = '%s%s%s %s' % (\n                f2pyenhancements, tab + tabchar, k, block['f2pyenhancements'][k])\n    intent_lst = block.get('intent', [])[:]\n    if blocktype == 'function' and 'callback' in intent_lst:\n        intent_lst.remove('callback')\n    if intent_lst:\n        f2pyenhancements = '%s%sintent(%s) %s' %\\\n                           (f2pyenhancements, tab + tabchar,\n                            ','.join(intent_lst), name)\n    use = ''\n    if 'use' in block:\n        use = use2fortran(block['use'], tab + tabchar)\n    common = ''\n    if 'common' in block:\n        common = common2fortran(block['common'], tab + tabchar)\n    if name == 'unknown_interface':\n        name = ''\n    result = ''\n    if 'result' in block:\n        result = ' result (%s)' % block['result']\n        if block['result'] not in argsl:\n            argsl.append(block['result'])\n    body = crack2fortrangen(block['body'], tab + tabchar, as_interface=as_interface)\n    vars = vars2fortran(\n        block, block['vars'], argsl, tab + tabchar, as_interface=as_interface)\n    mess = ''\n    if 'from' in block and not as_interface:\n        mess = '! in %s' % block['from']\n    if 'entry' in block:\n        entry_stmts = ''\n        for k, i in list(block['entry'].items()):\n            entry_stmts = '%s%sentry %s(%s)' \\\n                          % (entry_stmts, tab + tabchar, k, ','.join(i))\n        body = body + entry_stmts\n    if blocktype == 'block data' and name == '_BLOCK_DATA_':\n        name = ''\n    ret = '%s%s%s %s%s%s %s%s%s%s%s%s%send %s %s' % (\n        tab, prefix, blocktype, name, args, result, mess, f2pyenhancements, use, vars, common, body, tab, blocktype, name)\n    return ret\n"
    }
  ],
  "generated_inputs": [
    "```python\n<needimport>\nimport copy\n\n<testcase_1>\nblock = {\n    'vars': {\n        'a': {'typespec': 'integer', 'attrspec': ['intent(in)']},\n        'b': {'typespec': 'real', 'attrspec': ['intent(out)'], 'dimension': ['10']}\n    },\n    'commonvars': ['a'],\n    'varnames': ['b'],\n    'externals': ['b'],\n    'body': [{'name': 'func1', 'block': 'function'}],\n    'name': 'test_function',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['a', 'b']\ntab = '    '\nas_interface = False\n\n<testcase_2>\nblock = {\n    'vars': {\n        'x': {'typespec': 'real', 'attrspec': ['intent(inout)'], 'dimension': ['5']},\n        'y': {'typespec': 'complex', 'attrspec': ['intent(in)'], '=': '(1.0, 2.0)'}\n    },\n    'varnames': ['x', 'y'],\n    'externals': ['x'],\n    'body': [{'name': 'func2', 'block': 'function'}],\n    'name': 'test_subroutine',\n    'block': 'subroutine'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['x', 'y']\ntab = '  '\nas_interface = True\n\n<testcase_3>\nblock = {\n    'vars': {\n        'm': {'typespec': 'integer', 'attrspec': ['intent(in)'], 'dimension': ['3', '3']},\n        'n': {'typespec': 'double precision', 'attrspec': ['intent(out)']}\n    },\n    'commonvars': ['m'],\n    'varnames': ['n'],\n    'externals': ['n'],\n    'body': [{'name': 'func3', 'block': 'function'}],\n    'name': 'matrix_operation',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['m', 'n']\ntab = '\\t'\nas_interface = False\n\n<testcase_4>\nblock = {\n    'vars': {\n        'p': {'typespec': 'character', 'attrspec': ['intent(in)'], 'charselector': {'len': '10'}},\n        'q': {'typespec': 'logical', 'attrspec': ['intent(out)']}\n    },\n    'varnames': ['p', 'q'],\n    'externals': ['p'],\n    'body': [{'name': 'func4', 'block': 'function'}],\n    'name': 'string_check',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['p', 'q']\ntab = '    '\nas_interface = False\n\n<testcase_5>\nblock = {\n    'vars': {\n        'u': {'typespec': 'type', 'typename': 'custom_type', 'attrspec': ['intent(inout)']},\n        'v': {'typespec': 'integer', 'attrspec': ['intent(in)'], 'depend': ['u']}\n    },\n    'commonvars': ['u'],\n    'varnames': ['v'],\n    'externals': ['v'],\n    'body': [{'name': 'func5', 'block': 'function'}],\n    'name': 'custom_type_handler',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['u', 'v']\ntab = ''\nas_interface = True\n```"
  ],
  "gpt_output": "```python\n<needimport>\nimport copy\n\n<testcase_1>\nblock = {\n    'vars': {\n        'a': {'typespec': 'integer', 'attrspec': ['intent(in)']},\n        'b': {'typespec': 'real', 'attrspec': ['intent(out)'], 'dimension': ['10']}\n    },\n    'commonvars': ['a'],\n    'varnames': ['b'],\n    'externals': ['b'],\n    'body': [{'name': 'func1', 'block': 'function'}],\n    'name': 'test_function',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['a', 'b']\ntab = '    '\nas_interface = False\n\n<testcase_2>\nblock = {\n    'vars': {\n        'x': {'typespec': 'real', 'attrspec': ['intent(inout)'], 'dimension': ['5']},\n        'y': {'typespec': 'complex', 'attrspec': ['intent(in)'], '=': '(1.0, 2.0)'}\n    },\n    'varnames': ['x', 'y'],\n    'externals': ['x'],\n    'body': [{'name': 'func2', 'block': 'function'}],\n    'name': 'test_subroutine',\n    'block': 'subroutine'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['x', 'y']\ntab = '  '\nas_interface = True\n\n<testcase_3>\nblock = {\n    'vars': {\n        'm': {'typespec': 'integer', 'attrspec': ['intent(in)'], 'dimension': ['3', '3']},\n        'n': {'typespec': 'double precision', 'attrspec': ['intent(out)']}\n    },\n    'commonvars': ['m'],\n    'varnames': ['n'],\n    'externals': ['n'],\n    'body': [{'name': 'func3', 'block': 'function'}],\n    'name': 'matrix_operation',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['m', 'n']\ntab = '\\t'\nas_interface = False\n\n<testcase_4>\nblock = {\n    'vars': {\n        'p': {'typespec': 'character', 'attrspec': ['intent(in)'], 'charselector': {'len': '10'}},\n        'q': {'typespec': 'logical', 'attrspec': ['intent(out)']}\n    },\n    'varnames': ['p', 'q'],\n    'externals': ['p'],\n    'body': [{'name': 'func4', 'block': 'function'}],\n    'name': 'string_check',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['p', 'q']\ntab = '    '\nas_interface = False\n\n<testcase_5>\nblock = {\n    'vars': {\n        'u': {'typespec': 'type', 'typename': 'custom_type', 'attrspec': ['intent(inout)']},\n        'v': {'typespec': 'integer', 'attrspec': ['intent(in)'], 'depend': ['u']}\n    },\n    'commonvars': ['u'],\n    'varnames': ['v'],\n    'externals': ['v'],\n    'body': [{'name': 'func5', 'block': 'function'}],\n    'name': 'custom_type_handler',\n    'block': 'function'\n}\nvars = copy.deepcopy(block['vars'])\nargs = ['u', 'v']\ntab = ''\nas_interface = True\n```",
  "needimport": "import copy\n\n",
  "test_results": {
    "ans1": "    integer, intent(in) :: a    external b    external b",
    "ans2": "  external x  complex, intent(in) :: y=(1.0, 2.0)  external x  complex, intent(in) :: y=(1.0, 2.0)",
    "ans3": "\tinteger, intent(in),dimension(3,3) :: m\texternal n\texternal n",
    "ans4": "    external p    logical, intent(out) :: q    external p    logical, intent(out) :: q",
    "ans5": "type(custom_type), intent(inout) :: uexternal vexternal v"
  }
}