{
  "input_header": "def unpack(tensor: Tensor, packed_shapes: List[Shape], pattern: str) -> List[Tensor]:",
  "input_docstring": "Unpacks a single tensor into several by splitting over a selected axes.\nSee einops tutorial for introduction into packing (and how it replaces stack and concatenation).\n\nParameters:\n    tensor: tensor to be unpacked\n    packed_shapes: packed_shapes (aka PS) is a list of shapes that take place of '*' in each output.\n        output will contain a single tensor for every provided shape\n    pattern: pattern that is shared for input and all outputs, e.g. \"i j * k\" or \"batch seq *\",\n        where * designates an axis to be unpacked\n\nReturns:\n    list of tensors\n\nIf framework supports views, results are views to the original tensor.\n\nExample:\n```python\n>>> from numpy import zeros as Z\n>>> inputs = [Z([2, 3, 5]), Z([2, 3, 7, 5]), Z([2, 3, 7, 9, 5])]\n>>> packed, ps = pack(inputs, 'i j * k')\n>>> packed.shape, ps\n((2, 3, 71, 5), [(), (7,), (7, 9)])\n```\n\nIn this example, axes were matched to: i=2, j=3, k=5 based on order (first, second, and last).\nAll other axes were 'packed' and concatenated.\nPS (packed shapes) contains information about axes that were matched to '*' in every input.\nResulting tensor has as many elements as all inputs in total.\n\nPacking can be reversed with unpack, which additionally needs PS (packed shapes) to reconstruct order.\n\n```python\n>>> inputs_unpacked = unpack(packed, ps, 'i j * k')\n>>> [x.shape for x in inputs_unpacked]\n[(2, 3, 5), (2, 3, 7, 5), (2, 3, 7, 9, 5)]\n```\n\nRead the tutorial for introduction and application scenarios.",
  "output_code": "def unpack(tensor: Tensor, packed_shapes: List[Shape], pattern: str) -> List[Tensor]:\n    \n    n_axes_before, n_axes_after, min_axes = analyze_pattern(pattern, opname=\"unpack\")\n\n    backend = get_backend(tensor)\n    input_shape = backend.shape(tensor)\n    if len(input_shape) != n_axes_before + 1 + n_axes_after:\n        raise EinopsError(f\"unpack(..., {pattern}) received input of wrong dim with shape {input_shape}\")\n\n    unpacked_axis: int = n_axes_before\n\n    lengths_of_composed_axes: List[int] = [-1 if -1 in p_shape else prod(p_shape) for p_shape in packed_shapes]\n\n    n_unknown_composed_axes = sum(int(x == -1) for x in lengths_of_composed_axes)\n    if n_unknown_composed_axes > 1:\n        raise EinopsError(\n            f\"unpack(..., {pattern}) received more than one -1 in {packed_shapes} and can't infer dimensions\"\n        )\n\n\n    split_positions = [0] * len(packed_shapes) + [input_shape[unpacked_axis]]\n    if n_unknown_composed_axes == 0:\n        for i, x in enumerate(lengths_of_composed_axes[:-1]):\n            split_positions[i + 1] = split_positions[i] + x\n    else:\n        unknown_composed_axis: int = lengths_of_composed_axes.index(-1)\n        for i in range(unknown_composed_axis):\n            split_positions[i + 1] = split_positions[i] + lengths_of_composed_axes[i]\n        for j in range(unknown_composed_axis + 1, len(lengths_of_composed_axes))[::-1]:\n            split_positions[j] = split_positions[j + 1] - lengths_of_composed_axes[j]\n\n    shape_start = input_shape[:unpacked_axis]\n    shape_end = input_shape[unpacked_axis + 1 :]\n    slice_filler = (slice(None, None),) * unpacked_axis\n    try:\n        return [\n            backend.reshape(\n                tensor[(*slice_filler, slice(split_positions[i], split_positions[i + 1]))],\n                (*shape_start, *element_shape, *shape_end),\n            )\n            for i, element_shape in enumerate(packed_shapes)\n        ]\n    except Exception:\n        raise RuntimeError(\n            f'Error during unpack(..., \"{pattern}\"): could not split axis of size {split_positions[-1]}'\n            f\" into requested {packed_shapes}\"\n        )",
  "input_contexts": [
    {
      "id": "arogozhnikov_einops_242_5",
      "input_code": "def test_pack_unpack_with_numpy():\n    case: UnpackTestCase\n\n    for case in cases:\n        shape = case.shape\n        pattern = case.pattern\n\n        x = np.random.random(shape)\n        unpack_and_pack(x, [[2], [1], [2]], pattern)\n        with pytest.raises(BaseException):\n            unpack_and_pack(x, [[2], [1], [2]], pattern + \" non_existent_axis\")\n        with pytest.raises(BaseException):\n            unpack_and_pack(x, [[2], [1], [1]], pattern)\n        with pytest.raises(BaseException):\n            unpack_and_pack(x, [[4], [1], [1]], pattern)\n        unpack_and_pack(x, [[2], [1], [-1]], pattern)\n        unpack_and_pack(x, [[2], [-1], [2]], pattern)\n        unpack_and_pack(x, [[-1], [1], [2]], pattern)\n        _, _, last = unpack_and_pack(x, [[2], [3], [-1]], pattern)\n        assert last.shape[case.dim()] == 0\n        with pytest.raises(BaseException):\n            unpack(x, [[2], [4], [-1]], pattern)\n        with pytest.raises(BaseException):\n            unpack(x, [[-1], [1], [5]], pattern)\n\n        rs = unpack_and_pack(x, [[1, 2], [1, 1], [-1, 1]], pattern)\n        assert all(len(r.shape) == len(x.shape) + 1 for r in rs)\n        rs = unpack_and_pack(x, [[1, 2], [1, -1], [1, 1]], pattern)\n        assert all(len(r.shape) == len(x.shape) + 1 for r in rs)\n        rs = unpack_and_pack(x, [[2, -1], [1, 2], [1, 1]], pattern)\n        assert all(len(r.shape) == len(x.shape) + 1 for r in rs)\n\n        with pytest.raises(BaseException):\n            unpack(x, [[-1, 2], [1], [5]], pattern)\n        with pytest.raises(BaseException):\n            unpack(x, [[2, 2], [2], [5, -1]], pattern)\n\n        with pytest.raises(BaseException):\n            unpack(x, [[2, 1], [1], [3, -1]], pattern)\n        with pytest.raises(BaseException):\n            unpack(x, [[2, 1], [3, -1], [1]], pattern)\n        with pytest.raises(BaseException):\n            unpack(x, [[3, -1], [2, 1], [1]], pattern)\n\n        unpack_and_pack(x, [[0], [5], [-1]], pattern)\n        unpack_and_pack(x, [[0], [-1], [5]], pattern)\n        unpack_and_pack(x, [[-1], [5], [0]], pattern)\n\n        unpack_and_pack(x, [[2, -1], [1, 5]], pattern)\n"
    },
    {
      "id": "arogozhnikov_einops_242_3",
      "input_code": "def unpack_and_pack(x, ps, pattern: str):\n    unpacked = unpack(x, ps, pattern)\n    packed, ps2 = pack(unpacked, pattern=pattern)\n\n    assert np.allclose(asnumpy(packed), asnumpy(x))\n    return unpacked\n"
    },
    {
      "id": "arogozhnikov_einops_242_6",
      "input_code": "def test_pack_unpack_against_numpy():\n    for backend in collect_test_backends(symbolic=False, layers=False):\n        print(f\"test packing against numpy for {backend.framework_name}\")\n        check_zero_len = True\n\n        for case in cases:\n            unpack_and_pack = unpack_and_pack_against_numpy\n            shape = case.shape\n            pattern = case.pattern\n\n            x = np.random.random(shape)\n            x = backend.from_numpy(x)\n            unpack_and_pack(x, [[2], [1], [2]], pattern)\n            with pytest.raises(BaseException):\n                unpack(x, [[2], [1], [1]], pattern)\n\n            with pytest.raises(BaseException):\n                unpack(x, [[4], [1], [1]], pattern)\n            unpack_and_pack(x, [[2], [1], [-1]], pattern)\n            unpack_and_pack(x, [[2], [-1], [2]], pattern)\n            unpack_and_pack(x, [[-1], [1], [2]], pattern)\n\n            with pytest.raises(BaseException):\n                unpack(x, [[2], [4], [-1]], pattern)\n            with pytest.raises(BaseException):\n                unpack(x, [[-1], [1], [5]], pattern)\n\n            unpack_and_pack(x, [[1, 2], [1, 1], [-1, 1]], pattern)\n            unpack_and_pack(x, [[1, 2], [1, -1], [1, 1]], pattern)\n            unpack_and_pack(x, [[2, -1], [1, 2], [1, 1]], pattern)\n\n            with pytest.raises(BaseException):\n                unpack(x, [[-1, 2], [1], [5]], pattern)\n            with pytest.raises(BaseException):\n                unpack(x, [[2, 2], [2], [5, -1]], pattern)\n\n            with pytest.raises(BaseException):\n                unpack(x, [[2, 1], [1], [3, -1]], pattern)\n            with pytest.raises(BaseException):\n                unpack(x, [[2, 1], [3, -1], [1]], pattern)\n            with pytest.raises(BaseException):\n                unpack(x, [[3, -1], [2, 1], [1]], pattern)\n\n            if check_zero_len:\n                unpack_and_pack(x, [[2], [3], [-1]], pattern)\n                unpack_and_pack(x, [[0], [5], [-1]], pattern)\n                unpack_and_pack(x, [[0], [-1], [5]], pattern)\n                unpack_and_pack(x, [[-1], [5], [0]], pattern)\n\n                unpack_and_pack(x, [[2, -1], [1, 5]], pattern)\n"
    },
    {
      "id": "arogozhnikov_einops_242_7",
      "input_code": "def test_pack_unpack_array_api():\n    from einops import array_api as AA\n    import numpy as xp\n\n    if xp.__version__ < \"2.0.0\":\n        pytest.skip()\n\n    for case in cases:\n        shape = case.shape\n        pattern = case.pattern\n        x_np = np.random.random(shape)\n        x_xp = xp.from_dlpack(x_np)\n\n        for ps in [\n            [[2], [1], [2]],\n            [[1], [1], [-1]],\n            [[1], [1], [-1, 3]],\n            [[2, 1], [1, 1, 1], [-1]],\n        ]:\n            x_np_split = unpack(x_np, ps, pattern)\n            x_xp_split = AA.unpack(x_xp, ps, pattern)\n            for a, b in zip(x_np_split, x_xp_split):\n                assert np.allclose(a, AA.asnumpy(b + 0))\n\n            x_agg_np, ps1 = pack(x_np_split, pattern)\n            x_agg_xp, ps2 = AA.pack(x_xp_split, pattern)\n            assert ps1 == ps2\n            assert np.allclose(x_agg_np, AA.asnumpy(x_agg_xp))\n\n        for ps in [\n            [[2, 3]],\n            [[1], [5]],\n            [[1], [5], [-1]],\n            [[1], [2, 3]],\n            [[1], [5], [-1, 2]],\n        ]:\n            with pytest.raises(BaseException):\n                unpack(x_np, ps, pattern)\n"
    },
    {
      "id": "arogozhnikov_einops_242_2",
      "input_code": "def pack_unpack(xs, pattern):\n    x, ps = pack(xs, pattern)\n    unpacked = unpack(xs, ps, pattern)\n    assert len(unpacked) == len(xs)\n    for a, b in zip(unpacked, xs):\n        assert np.allclose(asnumpy(a), asnumpy(b))\n"
    },
    {
      "id": "arogozhnikov_einops_242_1",
      "input_code": "def test_torch_compile():\n    \n    if not is_backend_tested(\"torch\"):\n        pytest.skip()\n    import torch\n    from torch import nn\n    from einops import repeat, reduce, pack, unpack, einsum\n    from einops._torch_specific import allow_ops_in_compiled_graph\n\n    allow_ops_in_compiled_graph()\n\n    class TorchModuleWithOperations(nn.Module):\n        def __init__(self) -> None:\n            super().__init__()\n\n        def forward(self, x_abc, suffix=\"\"):\n            a, b, c = x_abc.shape\n\n            def suf(pattern):\n                parts = pattern.split()\n                return \" \".join([p if p[-1] not in \"acd\" else p + suffix for p in parts])\n\n            x_abcd = repeat(x_abc, suf(\"a b c -> a b c 4\"))\n            x_abc = reduce(x_abcd, suf(\"a b c d -> a b c\"), \"min\")\n            x_abdc, ps = pack([x_abc] * (2 + len(suffix)), suf(\"a b * c\"))\n            x_array = unpack(rearrange(x_abdc, suf(\"a b d c -> (a b ) 1 c d\")), ps, \"ab one1 c *\")\n            x1 = x_array[0] + len(x_array)\n            x1 = rearrange(x1, suf(\"(a b ) 1 c -> a b c\"), b=b)\n            addition = einsum(x_abc, x_abcd, suf(\"a b c , a b c d -> d\"))[0]\n            return x1 + addition\n\n    original = TorchModuleWithOperations()\n    compiled = torch.compile(original, fullgraph=True, backend=\"aot_eager\")\n    for size in [10, 20, 40]:\n        x = torch.rand([size, size + 1, size + 2])\n        for suffix in [\"\", \"suf1\", \"other_suffix\"]:\n            result1 = compiled(x, suffix)\n            result2 = original(x, suffix)\n            assert torch.allclose(result1, result2)\n"
    },
    {
      "id": "arogozhnikov_einops_242_4",
      "input_code": "def unpack_and_pack_against_numpy(x, ps, pattern: str):\n    capturer_backend = CaptureException()\n    capturer_numpy = CaptureException()\n\n    with capturer_backend:\n        unpacked = unpack(x, ps, pattern)\n        packed, ps2 = pack(unpacked, pattern=pattern)\n\n    with capturer_numpy:\n        x_np = asnumpy(x)\n        unpacked_np = unpack(x_np, ps, pattern)\n        packed_np, ps3 = pack(unpacked_np, pattern=pattern)\n\n    assert type(capturer_numpy.exception) == type(capturer_backend.exception)\n    if capturer_numpy.exception is not None:\n        return\n    else:\n        assert np.allclose(asnumpy(packed), asnumpy(x))\n        assert np.allclose(asnumpy(packed_np), asnumpy(x))\n        assert len(unpacked) == len(unpacked_np)\n        for a, b in zip(unpacked, unpacked_np):\n            assert np.allclose(asnumpy(a), b)\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport numpy as np\nfrom einops import pack\nfrom typing import List, Tuple\n\n<testcase_1>\ntensor = np.random.random((2, 3, 71, 5))\npacked_shapes = [(), (7,), (7, 9)]\npattern = 'i j * k'\n\n<testcase_2>\ntensor = np.random.random((4, 5, 36, 7))\npacked_shapes = [(6,), (6, 6)]\npattern = 'a b * c'\n\n<testcase_3>\ntensor = np.random.random((3, 2, 20, 4))\npacked_shapes = [(5,), (5, 3)]\npattern = 'x y * z'\n\n<testcase_4>\ntensor = np.random.random((5, 3, 45, 6))\npacked_shapes = [(9,), (9, 5)]\npattern = 'p q * r'\n\n<testcase_5>\ntensor = np.random.random((6, 4, 24, 8))\npacked_shapes = [(4,), (4, 2)]\npattern = 'm n * o'"
  ],
  "gpt_output": "<needimport>\nimport numpy as np\nfrom einops import pack\nfrom typing import List, Tuple\n\n<testcase_1>\ntensor = np.random.random((2, 3, 71, 5))\npacked_shapes = [(), (7,), (7, 9)]\npattern = 'i j * k'\n\n<testcase_2>\ntensor = np.random.random((4, 5, 36, 7))\npacked_shapes = [(6,), (6, 6)]\npattern = 'a b * c'\n\n<testcase_3>\ntensor = np.random.random((3, 2, 20, 4))\npacked_shapes = [(5,), (5, 3)]\npattern = 'x y * z'\n\n<testcase_4>\ntensor = np.random.random((5, 3, 45, 6))\npacked_shapes = [(9,), (9, 5)]\npattern = 'p q * r'\n\n<testcase_5>\ntensor = np.random.random((6, 4, 24, 8))\npacked_shapes = [(4,), (4, 2)]\npattern = 'm n * o'",
  "needimport": "import numpy as np\nfrom einops import pack\nfrom typing import List, Tuple\n\n",
  "test_results": {
    "ans1": "[array([[[0.82117017, 0.16305937, 0.13254241, 0.78115791, 0.32867746],\n        [0.93878474, 0.42421052, 0.02822059, 0.42183841, 0.32906832],\n        [0.02895824, 0.44442735, 0.37900009, 0.30145063, 0.09453327]],\n\n       [[0.24966191, 0.9770972 , 0.17592598, 0.18608788, 0.88822672],\n        [0.46574171, 0.14095567, 0.46456307, 0.14056018, 0.48273422],\n        [0.74973126, 0.36062391, 0.69423153, 0.38203849, 0.93929083]]]), array([[[[0.12598255, 0.17062476, 0.41015361, 0.90678859, 0.25509211],\n         [0.66705787, 0.52613823, 0.75573719, 0.55970692, 0.22319369],\n         [0.39091716, 0.14464323, 0.92471568, 0.04861339, 0.10450586],\n         [0.60756862, 0.34647803, 0.08730771, 0.84041605, 0.80841238],\n         [0.63759509, 0.7855336 , 0.28295509, 0.90201751, 0.373082  ],\n         [0.11806649, 0.50373469, 0.61514419, 0.32520938, 0.67360088],\n         [0.57738576, 0.4817093 , 0.66784437, 0.85189503, 0.2784722 ]],\n\n        [[0.3988619 , 0.50626893, 0.67365459, 0.48546199, 0.17861982],\n         [0.43412418, 0.27243968, 0.87104847, 0.14253757, 0.40823323],\n         [0.04014467, 0.42166851, 0.07841565, 0.12072586, 0.1397971 ],\n         [0.87023776, 0.36757087, 0.91884544, 0.65233486, 0.12410632],\n         [0.7041953 , 0.86526987, 0.33316439, 0.97490884, 0.64246696],\n         [0.95516941, 0.49978832, 0.87067984, 0.76158608, 0.29039473],\n         [0.74971368, 0.89642543, 0.43759718, 0.99762074, 0.50244855]],\n\n        [[0.27123663, 0.29414431, 0.18693643, 0.96390741, 0.15255782],\n         [0.27174997, 0.62884329, 0.20966757, 0.94036121, 0.79866112],\n         [0.96829852, 0.26540404, 0.9413692 , 0.87217539, 0.39411045],\n         [0.01019727, 0.2692348 , 0.9998356 , 0.76662958, 0.219603  ],\n         [0.96824914, 0.29437088, 0.46541173, 0.74436143, 0.96733858],\n         [0.17044042, 0.85508697, 0.76673677, 0.24775042, 0.52703447],\n         [0.0345381 , 0.89447495, 0.31411471, 0.01852165, 0.78629643]]],\n\n\n       [[[0.89422434, 0.37253991, 0.72929089, 0.05077801, 0.59207997],\n         [0.056181  , 0.78815102, 0.25956735, 0.08197927, 0.131431  ],\n         [0.14467207, 0.39767991, 0.29314325, 0.68410675, 0.29882482],\n         [0.93819604, 0.90009113, 0.57759907, 0.46590326, 0.82336017],\n         [0.04407361, 0.60590587, 0.85059944, 0.54924838, 0.63091584],\n         [0.17447417, 0.83626641, 0.03453742, 0.6221031 , 0.48079743],\n         [0.56238517, 0.04962376, 0.41796144, 0.96593566, 0.28028729]],\n\n        [[0.97441209, 0.94501643, 0.85198067, 0.61296582, 0.86747909],\n         [0.68469813, 0.81045901, 0.71353399, 0.63532295, 0.47787117],\n         [0.69879738, 0.3349765 , 0.54297491, 0.24944288, 0.56213748],\n         [0.70163897, 0.59095205, 0.30551318, 0.0939993 , 0.43497398],\n         [0.12621567, 0.86002833, 0.09480769, 0.53462222, 0.58560543],\n         [0.42565011, 0.16153939, 0.98419106, 0.04314403, 0.44740631],\n         [0.50464934, 0.36270712, 0.53598342, 0.43104848, 0.23370501]],\n\n        [[0.26360514, 0.45103744, 0.56219321, 0.00926417, 0.84816424],\n         [0.1181588 , 0.15947892, 0.98957379, 0.0622875 , 0.546481  ],\n         [0.6063946 , 0.74885013, 0.58879892, 0.09759971, 0.66769216],\n         [0.29510907, 0.66896001, 0.56149724, 0.85250935, 0.31156228],\n         [0.80876685, 0.22032992, 0.03854264, 0.49201031, 0.2767556 ],\n         [0.71177018, 0.18247924, 0.27678476, 0.58565287, 0.30593523],\n         [0.03513451, 0.14156957, 0.29330891, 0.77584423, 0.43076332]]]]), array([[[[[5.99317803e-01, 3.39387285e-01, 1.84143502e-02,\n           2.16838601e-01, 2.61000829e-01],\n          [6.32984274e-02, 6.43945467e-01, 9.97936258e-02,\n           3.09468192e-02, 2.55214460e-01],\n          [1.51607555e-01, 5.50128063e-01, 4.28650997e-01,\n           7.62845787e-01, 8.57157751e-01],\n          ...,\n          [3.54200317e-01, 3.45443774e-02, 4.12713837e-01,\n           7.54621754e-02, 6.15060097e-01],\n          [4.20670900e-01, 2.80181621e-01, 1.04254639e-01,\n           5.11001062e-01, 5.25031816e-01],\n          [8.32423946e-01, 9.80367657e-01, 3.73965243e-01,\n           6.37154717e-01, 3.19104918e-01]],\n\n         [[8.62011530e-01, 2.30555843e-01, 9.90873998e-01,\n           7.15602071e-01, 1.45912231e-01],\n          [1.01369023e-01, 4.41055864e-01, 8.45726782e-01,\n           5.43189098e-01, 4.97277403e-01],\n          [4.55777040e-01, 5.07237154e-01, 2.23025090e-01,\n           6.93173406e-01, 2.68491112e-01],\n          ...,\n          [8.54555167e-01, 3.31523396e-01, 4.38584951e-01,\n           1.47911347e-01, 2.79902971e-01],\n          [7.64749567e-01, 7.34619425e-01, 3.34846186e-01,\n           3.73257307e-01, 9.11630971e-01],\n          [2.21881738e-01, 9.21276059e-01, 6.10849147e-01,\n           3.05749482e-02, 2.34830242e-01]],\n\n         [[6.60047807e-01, 8.59946796e-01, 1.44448489e-01,\n           7.06052238e-01, 4.58076471e-01],\n          [1.51981448e-01, 7.30044316e-01, 3.42035165e-01,\n           3.87088093e-02, 4.84881251e-01],\n          [1.10604557e-01, 3.35540864e-01, 2.72838392e-01,\n           7.85021241e-02, 2.66507949e-01],\n          ...,\n          [4.00402302e-01, 8.27327931e-01, 1.72038521e-01,\n           5.69278466e-01, 6.16662374e-01],\n          [3.20364504e-01, 4.15037849e-01, 6.31308251e-01,\n           2.33595454e-01, 9.15022898e-02],\n          [2.70291182e-01, 9.27497855e-01, 4.31257994e-01,\n           7.01933975e-01, 1.28024384e-01]],\n\n         ...,\n\n         [[2.33923307e-01, 1.24448127e-01, 3.79722405e-01,\n           3.08504501e-01, 2.28085383e-01],\n          [8.20588674e-01, 1.01409062e-01, 7.94166352e-01,\n           4.81173775e-02, 6.07592253e-01],\n          [2.41123332e-01, 3.14430952e-01, 4.48506161e-01,\n           9.98661241e-01, 7.82118840e-01],\n          ...,\n          [3.16027392e-01, 7.62114369e-01, 4.02038162e-02,\n           1.22235580e-01, 4.88010396e-01],\n          [8.65239669e-01, 2.72593036e-01, 4.19387631e-01,\n           3.04320090e-01, 1.27164348e-01],\n          [1.59801536e-01, 5.30829922e-01, 1.50334573e-01,\n           4.26005022e-01, 7.70853950e-01]],\n\n         [[2.21811131e-01, 8.28849432e-01, 6.85465670e-01,\n           6.84206709e-01, 9.68715895e-02],\n          [8.62719230e-01, 9.44152745e-01, 2.07914878e-01,\n           5.57006638e-01, 8.40284139e-02],\n          [6.73336096e-01, 6.88961679e-01, 1.33758715e-01,\n           5.82624241e-02, 5.05776102e-01],\n          ...,\n          [4.39392832e-01, 4.69999459e-01, 2.32988768e-01,\n           9.75726815e-01, 2.20944979e-01],\n          [8.82009228e-01, 2.43075041e-01, 9.49472446e-01,\n           3.52487196e-01, 6.49502664e-01],\n          [9.20194182e-01, 2.08014303e-01, 2.45317256e-01,\n           7.92863356e-01, 9.17202701e-01]],\n\n         [[8.03356082e-01, 4.50078678e-01, 1.61207480e-01,\n           6.15236947e-01, 8.28717642e-01],\n          [5.12302288e-01, 2.15258584e-01, 4.33544519e-01,\n           5.89777406e-01, 1.23321760e-01],\n          [1.10576104e-01, 7.21727675e-01, 4.68564817e-01,\n           3.33355265e-01, 9.12444087e-02],\n          ...,\n          [7.82568947e-01, 5.78122227e-01, 7.79140790e-01,\n           7.48740678e-01, 3.41603945e-01],\n          [5.24320939e-01, 6.15799364e-01, 9.97271055e-01,\n           1.49218627e-01, 6.97207686e-01],\n          [8.02898544e-02, 5.63396098e-01, 3.46197669e-01,\n           3.90426731e-01, 1.28522319e-01]]],\n\n\n        [[[1.99415978e-01, 8.15417070e-01, 7.46479382e-01,\n           9.86573325e-01, 6.63547227e-01],\n          [4.39767143e-01, 7.12790091e-01, 7.16335434e-01,\n           4.36656697e-02, 4.46777452e-01],\n          [6.43874748e-01, 9.15697960e-01, 9.68450322e-01,\n           6.39774111e-01, 6.15538643e-01],\n          ...,\n          [4.41829856e-01, 7.21158867e-01, 7.45073298e-01,\n           5.01739820e-02, 5.70181835e-02],\n          [3.95956916e-01, 5.30234362e-01, 1.45765468e-01,\n           2.46355537e-01, 8.79680924e-01],\n          [7.34245855e-01, 8.41616203e-01, 9.06277370e-01,\n           2.15966412e-01, 1.30839794e-01]],\n\n         [[1.07182667e-01, 1.40426360e-01, 5.55974631e-01,\n           5.07974984e-01, 9.82944077e-01],\n          [6.09498645e-01, 4.05720918e-01, 5.45102166e-01,\n           7.71376963e-01, 6.54716151e-01],\n          [1.35039564e-02, 2.45937207e-01, 7.61561347e-01,\n           5.19840339e-01, 3.30552568e-01],\n          ...,\n          [2.43024763e-01, 5.94321238e-01, 7.90198090e-02,\n           3.25985685e-01, 4.34705509e-01],\n          [1.19475896e-02, 2.87707684e-01, 1.01258137e-01,\n           2.29603723e-02, 3.54813525e-01],\n          [3.63613075e-01, 3.64398891e-01, 8.45379960e-01,\n           6.39070279e-01, 2.47193089e-01]],\n\n         [[9.48977971e-01, 1.62598272e-01, 7.27709573e-01,\n           4.99416091e-01, 5.73980804e-01],\n          [6.94214750e-01, 7.59198720e-01, 1.72208634e-01,\n           8.61532238e-02, 4.55616356e-01],\n          [1.35962195e-01, 5.99938816e-01, 3.74125206e-01,\n           5.52083069e-01, 2.98643792e-01],\n          ...,\n          [7.46420174e-01, 1.55207276e-01, 5.31492537e-01,\n           9.48860378e-01, 6.93151527e-01],\n          [4.40426682e-02, 9.35447282e-01, 8.56309031e-01,\n           5.80840013e-01, 4.17245204e-01],\n          [7.86682270e-01, 2.92364635e-01, 9.91982428e-03,\n           7.31228622e-02, 5.08533475e-01]],\n\n         ...,\n\n         [[2.83490944e-01, 3.18676946e-01, 7.65010706e-01,\n           3.29043160e-01, 8.79421177e-01],\n          [2.13331600e-01, 2.78394318e-01, 9.21484974e-01,\n           4.31094621e-01, 6.20925949e-01],\n          [9.41257432e-01, 6.06764312e-01, 6.83655048e-01,\n           1.20289224e-01, 7.25646603e-01],\n          ...,\n          [2.80666504e-01, 3.76419060e-01, 2.03564910e-01,\n           9.92112095e-01, 1.01988405e-01],\n          [6.03718831e-01, 3.33526849e-01, 8.19182565e-01,\n           2.16984929e-01, 2.43141344e-01],\n          [4.12485957e-01, 6.27289561e-01, 3.83931822e-01,\n           2.03146893e-01, 4.38113404e-01]],\n\n         [[3.28535128e-01, 6.14321193e-01, 2.13268286e-01,\n           2.47128844e-01, 5.24677421e-01],\n          [2.69431049e-01, 8.73921265e-01, 7.60059301e-01,\n           9.12894422e-01, 5.01312864e-01],\n          [2.42048215e-01, 8.20684440e-01, 4.01175336e-01,\n           8.02202494e-01, 8.56250206e-01],\n          ...,\n          [9.41357706e-01, 1.32826749e-01, 1.06469394e-01,\n           1.12892082e-02, 5.70550943e-01],\n          [5.99056388e-01, 2.12060353e-01, 2.12431074e-01,\n           9.92332831e-01, 9.57729519e-01],\n          [4.00636274e-01, 4.99524232e-01, 1.91021422e-01,\n           5.77916866e-01, 1.25257718e-01]],\n\n         [[2.64950361e-02, 2.08088219e-01, 9.00548622e-01,\n           4.39222367e-01, 2.38965741e-01],\n          [3.80397816e-01, 4.18511317e-01, 4.46175274e-01,\n           3.22855797e-01, 2.82801156e-01],\n          [6.33334763e-01, 3.29970120e-01, 9.06686322e-02,\n           1.25622428e-01, 4.40320789e-01],\n          ...,\n          [5.55868543e-01, 1.59657066e-01, 5.70846723e-01,\n           5.59011915e-01, 4.68975739e-01],\n          [1.37100898e-01, 9.05523284e-01, 4.09603089e-01,\n           2.69447361e-01, 9.23285169e-01],\n          [7.48795821e-01, 3.23584960e-01, 6.25735481e-02,\n           1.55038653e-01, 1.19485184e-01]]],\n\n\n        [[[7.68837146e-01, 8.07975980e-01, 1.33802085e-01,\n           9.78127305e-02, 7.09535926e-01],\n          [8.15490370e-01, 1.66179445e-01, 5.75327865e-01,\n           6.86203206e-02, 4.62742285e-01],\n          [5.01110030e-01, 2.86674137e-01, 7.43859450e-01,\n           5.83684810e-01, 7.62077625e-01],\n          ...,\n          [4.40960509e-01, 6.33482063e-01, 1.89004042e-01,\n           3.86791002e-01, 6.26432664e-01],\n          [3.12824428e-01, 3.77902357e-01, 6.68846483e-01,\n           3.49094323e-03, 7.88726019e-01],\n          [4.91526059e-01, 1.98378739e-01, 6.31371673e-01,\n           6.77100280e-01, 8.82011754e-01]],\n\n         [[7.16640541e-02, 4.35590853e-01, 2.61735243e-01,\n           1.85000730e-01, 8.98047606e-01],\n          [1.23054489e-01, 2.25540632e-01, 4.72979767e-01,\n           1.59466399e-01, 9.26787899e-01],\n          [2.06395297e-01, 8.51232900e-01, 6.02290857e-01,\n           8.36696582e-01, 5.22535299e-01],\n          ...,\n          [7.64799613e-01, 5.92570175e-01, 7.52530480e-01,\n           9.35675870e-02, 3.97305830e-01],\n          [8.61575204e-01, 1.13885257e-01, 5.28169187e-01,\n           1.46939753e-01, 5.22941763e-01],\n          [9.74049972e-01, 2.08649076e-01, 6.00165534e-01,\n           8.29704275e-02, 5.09104584e-01]],\n\n         [[2.46501473e-01, 5.24350945e-01, 7.15108544e-01,\n           3.99492685e-01, 2.65254858e-01],\n          [6.10016346e-01, 8.38508706e-01, 3.02024915e-01,\n           3.38647651e-01, 9.62201466e-02],\n          [5.74091113e-01, 8.60450834e-01, 8.75256145e-01,\n           4.07865882e-01, 7.31487625e-02],\n          ...,\n          [3.42259358e-01, 7.12303726e-01, 7.42933546e-01,\n           4.11431921e-01, 2.28344513e-01],\n          [6.31960303e-01, 9.07496408e-01, 7.32685774e-01,\n           5.10960315e-01, 7.98503999e-01],\n          [7.36496196e-01, 3.80584446e-01, 4.62391005e-01,\n           6.10452150e-01, 1.64061069e-01]],\n\n         ...,\n\n         [[5.24531770e-01, 9.36343514e-01, 8.88128891e-01,\n           7.40832790e-01, 4.09886020e-01],\n          [4.05341798e-01, 7.19950154e-02, 1.27043418e-01,\n           2.99441355e-02, 5.60231584e-01],\n          [1.46090508e-01, 7.61779914e-01, 4.60496283e-01,\n           6.17008663e-02, 7.83854113e-01],\n          ...,\n          [6.66427089e-01, 6.82165648e-01, 5.10690554e-01,\n           9.07994515e-01, 6.27963277e-01],\n          [6.55122200e-01, 1.84760447e-01, 3.84161835e-01,\n           4.22428000e-01, 1.66426981e-01],\n          [5.54510312e-01, 3.72559475e-01, 3.67335711e-01,\n           7.03990505e-01, 1.14211136e-01]],\n\n         [[4.51580771e-01, 8.74931044e-01, 5.17466183e-02,\n           9.90464141e-01, 3.15335116e-01],\n          [5.67156798e-01, 9.27868577e-01, 2.37071952e-01,\n           3.88241881e-01, 7.56406688e-01],\n          [5.08339554e-01, 1.16040489e-01, 3.10788565e-02,\n           4.60633678e-01, 9.47547225e-01],\n          ...,\n          [4.42362470e-01, 8.34200984e-01, 9.92768710e-01,\n           7.42378961e-01, 7.55313574e-01],\n          [6.50516198e-01, 5.08246547e-01, 6.69588335e-01,\n           9.31446670e-01, 7.23748936e-01],\n          [7.39760678e-01, 5.59565779e-01, 1.71850866e-01,\n           4.59905008e-01, 8.62667329e-01]],\n\n         [[7.72764860e-01, 1.42364406e-01, 5.87424271e-01,\n           3.31273494e-01, 4.09299298e-01],\n          [1.49174952e-01, 1.46724479e-01, 6.22857619e-01,\n           2.16155256e-01, 8.45818603e-01],\n          [4.44763486e-01, 7.96260463e-01, 2.86742797e-01,\n           8.42435016e-02, 8.23513479e-01],\n          ...,\n          [7.89898575e-01, 5.25899910e-01, 7.72477266e-01,\n           1.12202819e-01, 6.49714846e-02],\n          [2.69351344e-02, 7.07567829e-01, 1.06123287e-01,\n           1.24854167e-01, 6.61363083e-01],\n          [8.53002028e-01, 4.04926939e-01, 8.71603996e-01,\n           7.38204231e-01, 8.62171661e-01]]]],\n\n\n\n       [[[[9.47391207e-01, 8.51952292e-01, 7.50015948e-01,\n           6.65264822e-01, 5.74732708e-01],\n          [5.17587455e-01, 1.49837532e-01, 4.29179288e-01,\n           5.27834717e-01, 7.75858870e-01],\n          [2.90649498e-01, 7.45424973e-01, 5.66497115e-03,\n           9.72294067e-01, 3.76708119e-01],\n          ...,\n          [7.65050925e-01, 6.77900427e-01, 7.99830954e-01,\n           3.26470035e-01, 4.86047762e-01],\n          [9.22780157e-01, 5.24134003e-01, 3.51158494e-01,\n           6.44505432e-01, 6.22354872e-01],\n          [2.27358605e-01, 5.66865858e-01, 1.90675071e-01,\n           6.59128116e-02, 5.55947812e-01]],\n\n         [[3.14778439e-01, 2.63612815e-01, 1.09996345e-01,\n           1.65393749e-01, 4.62489883e-01],\n          [4.30084843e-01, 6.31634637e-01, 7.49066747e-01,\n           8.88271069e-01, 9.58855513e-01],\n          [3.20306862e-01, 3.01781656e-01, 3.30807743e-01,\n           8.41948759e-01, 4.72913614e-01],\n          ...,\n          [5.00965476e-01, 2.92769484e-01, 9.67695702e-01,\n           9.29714138e-01, 5.77644290e-01],\n          [9.05648083e-01, 4.17952151e-01, 8.39237493e-01,\n           9.68708944e-01, 5.37740647e-01],\n          [6.11279512e-01, 5.94630414e-01, 1.63146153e-01,\n           4.04201783e-01, 4.49901409e-01]],\n\n         [[7.90746934e-01, 9.41306254e-01, 1.28397195e-01,\n           3.01315537e-02, 8.11197911e-01],\n          [2.30552397e-01, 7.67219858e-01, 4.52606646e-02,\n           5.51480732e-01, 7.30927779e-01],\n          [8.42869645e-01, 3.81932428e-01, 1.05066640e-02,\n           9.94115189e-01, 5.89536172e-02],\n          ...,\n          [8.26523106e-01, 5.42554631e-01, 2.82189456e-01,\n           7.82428478e-01, 8.56991838e-01],\n          [6.44269619e-01, 7.12379737e-01, 1.54743759e-01,\n           8.73995560e-01, 4.38762590e-01],\n          [6.21642736e-01, 1.70814611e-01, 8.38070512e-02,\n           9.85203613e-01, 4.39000430e-02]],\n\n         ...,\n\n         [[9.71289403e-01, 7.28577999e-01, 5.95325300e-01,\n           1.88553494e-01, 4.74607292e-01],\n          [2.54853515e-01, 1.75329175e-01, 1.59010376e-01,\n           6.08337307e-01, 5.09977882e-01],\n          [8.90677940e-01, 7.10609200e-01, 4.30117593e-01,\n           6.05204146e-01, 5.96614580e-01],\n          ...,\n          [1.48897279e-02, 7.27688065e-02, 8.72269533e-01,\n           4.95075239e-01, 5.12431236e-01],\n          [9.06669841e-01, 6.43285878e-01, 1.95528341e-01,\n           2.28366459e-01, 7.93201523e-01],\n          [8.53874491e-01, 9.90784583e-02, 2.75873163e-01,\n           1.37106674e-01, 5.06033190e-01]],\n\n         [[3.95027799e-01, 5.30577326e-01, 3.83819109e-01,\n           5.36069870e-01, 5.05257730e-02],\n          [1.78488454e-01, 2.56491308e-01, 6.84956980e-02,\n           1.95184988e-01, 4.28484129e-01],\n          [1.49753721e-01, 2.74435654e-01, 8.46978125e-02,\n           9.26702516e-01, 7.53578273e-01],\n          ...,\n          [7.27009675e-01, 1.85392285e-01, 1.09710069e-01,\n           1.76070216e-01, 7.88090018e-01],\n          [2.07011970e-01, 3.70001105e-02, 2.97169107e-01,\n           2.10186071e-01, 1.81047026e-02],\n          [7.01140646e-01, 3.99739602e-02, 6.35965603e-01,\n           3.21080870e-01, 1.95635679e-01]],\n\n         [[8.04453871e-01, 2.36273158e-01, 6.57504501e-01,\n           7.69944943e-03, 2.56844805e-01],\n          [6.54884166e-01, 8.99972101e-01, 4.31172512e-01,\n           9.11140105e-01, 4.72338096e-01],\n          [3.78844508e-01, 5.73154789e-01, 3.77973852e-02,\n           9.52145764e-01, 1.95519812e-01],\n          ...,\n          [5.47026309e-01, 1.74283560e-01, 2.13880160e-01,\n           6.61537596e-01, 4.49447696e-01],\n          [1.23780107e-02, 3.78927523e-01, 4.29886377e-01,\n           2.81037126e-01, 4.29454961e-01],\n          [5.47240374e-01, 3.68636191e-01, 4.55333949e-01,\n           5.21561037e-01, 4.12404209e-01]]],\n\n\n        [[[8.76532342e-01, 9.92838180e-01, 7.02421227e-02,\n           8.11578179e-01, 7.91716579e-01],\n          [5.15507697e-01, 4.73715279e-02, 5.78078203e-01,\n           8.63175912e-01, 1.47521001e-01],\n          [5.08051322e-01, 2.35658344e-01, 7.46856402e-01,\n           4.94223842e-01, 6.33736241e-01],\n          ...,\n          [1.63474046e-01, 9.21384846e-01, 7.06858600e-01,\n           9.29449647e-01, 1.96867840e-01],\n          [4.87673213e-01, 7.60170540e-01, 7.71921010e-01,\n           1.20120005e-01, 5.15004461e-01],\n          [6.81889542e-01, 8.46501720e-01, 3.87043699e-01,\n           6.40558942e-01, 6.35162882e-01]],\n\n         [[7.36220957e-02, 7.26585800e-01, 5.51127795e-01,\n           4.24518687e-01, 6.13600843e-01],\n          [5.46095956e-02, 9.28790694e-01, 3.27068315e-01,\n           3.39643134e-01, 3.48671012e-01],\n          [9.41559011e-01, 6.60803598e-01, 7.88813406e-01,\n           8.63041157e-01, 8.14668186e-01],\n          ...,\n          [3.72380172e-03, 8.23677348e-01, 6.11475331e-01,\n           3.89539317e-01, 1.30772065e-02],\n          [4.89274008e-01, 3.23015411e-01, 1.61580816e-01,\n           6.04594967e-01, 9.38310843e-01],\n          [4.06696796e-01, 6.85858052e-01, 7.68358970e-01,\n           1.19660405e-02, 8.72556997e-03]],\n\n         [[1.05940165e-01, 5.04327866e-01, 8.21868292e-01,\n           5.56197232e-02, 9.88252984e-01],\n          [9.69628631e-01, 6.56287979e-01, 9.76207091e-01,\n           9.26607591e-01, 6.28571335e-01],\n          [1.98695718e-01, 4.57948497e-01, 2.16705025e-02,\n           6.94718974e-01, 2.01396843e-01],\n          ...,\n          [4.72821401e-01, 9.62044152e-02, 4.50465053e-02,\n           8.24373274e-01, 6.88916960e-02],\n          [5.49785349e-02, 1.87045903e-01, 9.11622272e-01,\n           8.82224672e-01, 3.79343039e-01],\n          [9.47036787e-01, 6.19596016e-01, 2.70595837e-01,\n           9.30503055e-01, 4.86694552e-01]],\n\n         ...,\n\n         [[1.71307996e-01, 1.92685186e-01, 1.28622363e-01,\n           7.64876136e-01, 3.25003600e-02],\n          [6.77009901e-01, 6.00013526e-01, 6.60993448e-01,\n           7.02209510e-01, 8.07622653e-01],\n          [5.44980972e-01, 8.96972332e-01, 7.33275633e-01,\n           8.61421240e-01, 1.99381232e-01],\n          ...,\n          [4.14429357e-01, 2.07080741e-01, 2.72377903e-01,\n           8.70158881e-01, 8.14875170e-01],\n          [8.20442774e-01, 5.27940968e-01, 8.76962791e-01,\n           2.65701959e-03, 2.65401832e-01],\n          [2.46618049e-01, 7.76058906e-01, 4.82188161e-02,\n           4.03898208e-01, 4.16077494e-01]],\n\n         [[9.51836246e-01, 5.03193116e-02, 4.34021239e-01,\n           7.36278594e-01, 7.03145114e-01],\n          [3.17000798e-01, 2.31724251e-01, 9.18017130e-02,\n           1.19387590e-01, 6.65120422e-01],\n          [3.19257327e-01, 2.69749051e-01, 9.66024230e-01,\n           3.04091108e-01, 8.20475789e-01],\n          ...,\n          [6.45040026e-01, 5.38217965e-01, 1.69960298e-01,\n           4.07311804e-01, 7.04529654e-01],\n          [4.28128577e-01, 1.06791565e-01, 2.62081364e-01,\n           2.49217526e-01, 1.59781861e-01],\n          [2.87087153e-01, 6.88184801e-01, 4.20205960e-01,\n           4.15102920e-01, 4.51911522e-01]],\n\n         [[1.94253298e-01, 1.23303499e-01, 5.11115774e-01,\n           7.64064247e-01, 7.07494558e-01],\n          [6.88152720e-01, 8.32247009e-01, 5.00651222e-01,\n           2.03908846e-01, 1.55917714e-01],\n          [6.55588187e-01, 4.00426106e-01, 7.68332424e-01,\n           9.29218646e-01, 1.75974122e-01],\n          ...,\n          [5.14106127e-01, 9.21719703e-01, 7.98242175e-01,\n           6.04943194e-01, 1.78790333e-02],\n          [1.28871361e-01, 4.61091517e-01, 7.81087352e-01,\n           2.85505455e-01, 2.35828515e-01],\n          [9.84183572e-01, 5.58793375e-01, 3.69914841e-01,\n           4.38546706e-01, 2.37545688e-01]]],\n\n\n        [[[8.51532249e-01, 7.47423782e-02, 3.64732053e-01,\n           2.85628939e-01, 1.37146878e-01],\n          [8.64953439e-01, 6.27890991e-04, 5.19636279e-01,\n           5.59017908e-01, 6.57942636e-01],\n          [9.04685003e-01, 4.47114986e-02, 6.76738229e-01,\n           8.30719300e-01, 1.40521001e-01],\n          ...,\n          [8.40417968e-01, 2.45704889e-01, 7.62932783e-01,\n           6.95423488e-01, 7.13874562e-01],\n          [1.64512308e-01, 7.96622299e-01, 7.90513588e-01,\n           3.65380401e-01, 2.50354397e-01],\n          [6.60311276e-01, 8.19145909e-01, 9.73279455e-01,\n           1.97144952e-01, 8.63232811e-01]],\n\n         [[8.34711301e-02, 8.24205770e-01, 5.26127754e-01,\n           4.23028274e-01, 4.37133716e-01],\n          [1.06509665e-01, 3.94735342e-01, 6.96096878e-01,\n           6.48899169e-01, 2.11984034e-01],\n          [3.94908082e-02, 3.34116437e-01, 2.20220299e-01,\n           2.06277176e-01, 7.22751432e-01],\n          ...,\n          [8.45007753e-01, 4.95474748e-01, 6.46189508e-01,\n           7.75851168e-01, 8.43083441e-01],\n          [7.47262940e-01, 9.41865598e-01, 2.36591703e-01,\n           4.87582238e-01, 9.00004905e-01],\n          [7.45073286e-01, 1.07300722e-01, 3.44015005e-01,\n           4.49738829e-01, 7.27063142e-01]],\n\n         [[3.42144012e-01, 6.95430198e-01, 1.95992209e-01,\n           7.98572841e-01, 1.20273721e-01],\n          [6.53983945e-01, 7.73536660e-01, 1.30862158e-02,\n           3.68308343e-01, 5.27305488e-01],\n          [7.44258302e-01, 9.91105492e-02, 7.87454759e-01,\n           9.02499265e-02, 4.94431277e-02],\n          ...,\n          [7.06573572e-01, 4.97069414e-01, 4.66496227e-01,\n           5.03756363e-01, 2.87012650e-02],\n          [3.97730730e-01, 2.17663816e-01, 3.55354542e-01,\n           2.19091774e-01, 8.64183745e-01],\n          [8.61776862e-01, 9.26125484e-01, 9.60313857e-02,\n           5.94825995e-02, 4.74274985e-01]],\n\n         ...,\n\n         [[7.56632064e-01, 7.82127041e-01, 2.39899918e-01,\n           9.69753049e-01, 5.76424434e-01],\n          [8.71211758e-01, 7.26100947e-01, 3.18766456e-01,\n           3.76067972e-02, 9.62086153e-01],\n          [1.66589642e-01, 1.01446154e-01, 8.76020272e-01,\n           1.46629744e-01, 1.60355380e-01],\n          ...,\n          [3.04997155e-01, 1.90379834e-01, 1.29330180e-01,\n           5.34866543e-01, 9.03769482e-01],\n          [4.03169590e-01, 8.44050701e-01, 3.26175199e-01,\n           2.89522275e-01, 4.67782322e-01],\n          [7.26574798e-01, 3.13526549e-01, 7.47598518e-01,\n           3.83728847e-01, 1.93056301e-01]],\n\n         [[4.51693329e-01, 4.35230781e-01, 8.23133992e-02,\n           8.14890968e-02, 6.86544092e-01],\n          [5.93225700e-01, 4.10930071e-01, 4.02853795e-01,\n           6.71532225e-01, 7.35589900e-01],\n          [7.04296226e-01, 2.67427317e-01, 3.19749804e-01,\n           5.69169629e-01, 9.21714009e-01],\n          ...,\n          [9.60706789e-01, 6.47622861e-01, 1.62408275e-01,\n           1.98922986e-01, 6.38946247e-01],\n          [6.54001358e-02, 2.92878054e-01, 3.19598864e-01,\n           5.91574050e-02, 2.95256826e-01],\n          [3.93871411e-01, 2.58842306e-01, 6.24857820e-01,\n           7.28387076e-01, 2.20994318e-01]],\n\n         [[5.10188575e-01, 2.50554238e-01, 7.96132688e-01,\n           4.84375927e-01, 6.41088912e-01],\n          [4.05754031e-01, 3.58007661e-01, 9.49439410e-01,\n           1.66482804e-01, 8.29806615e-01],\n          [6.58201233e-01, 2.49176083e-01, 1.47295977e-01,\n           8.93610439e-01, 6.30530043e-01],\n          ...,\n          [2.32264019e-01, 9.96966421e-01, 7.43297590e-01,\n           7.35002438e-01, 2.09624465e-01],\n          [3.84643310e-01, 2.56300315e-01, 6.33118357e-01,\n           2.94863009e-01, 7.25935256e-01],\n          [5.38663458e-02, 2.96520034e-01, 9.81465357e-01,\n           7.02526695e-03, 2.77934792e-02]]]]], shape=(2, 3, 7, 9, 5))]",
    "ans2": null,
    "ans3": "[array([[[[0.53601801, 0.84013158, 0.26911946, 0.50486621],\n         [0.86194792, 0.4278452 , 0.41990762, 0.12716335],\n         [0.10356244, 0.48977287, 0.18041324, 0.34293186],\n         [0.84266848, 0.39024035, 0.25867496, 0.27785109],\n         [0.20951659, 0.63896984, 0.03694892, 0.12128807]],\n\n        [[0.13501551, 0.75221406, 0.73712108, 0.04187138],\n         [0.10495967, 0.5228657 , 0.27146518, 0.40988824],\n         [0.64363268, 0.58166792, 0.77867702, 0.83717234],\n         [0.47182476, 0.17475495, 0.4387142 , 0.80772692],\n         [0.42416094, 0.31297196, 0.33796262, 0.76539765]]],\n\n\n       [[[0.46534897, 0.88178614, 0.88164293, 0.24444286],\n         [0.43983239, 0.08024824, 0.01233275, 0.78192613],\n         [0.208943  , 0.54348178, 0.07546853, 0.75976772],\n         [0.05464776, 0.08819516, 0.35954874, 0.43425811],\n         [0.07635083, 0.28158261, 0.20277127, 0.55869941]],\n\n        [[0.74187853, 0.55617395, 0.9471133 , 0.84952868],\n         [0.27459891, 0.39550204, 0.49158366, 0.38705014],\n         [0.93199617, 0.32044152, 0.88802065, 0.95658923],\n         [0.09043075, 0.91664245, 0.24520307, 0.43626437],\n         [0.56370489, 0.59639827, 0.13084509, 0.54175568]]],\n\n\n       [[[0.86857547, 0.73842332, 0.46941354, 0.16417576],\n         [0.05035054, 0.63626067, 0.93606489, 0.65676873],\n         [0.96508229, 0.60518706, 0.329404  , 0.55432709],\n         [0.62575239, 0.06891022, 0.33065973, 0.02390511],\n         [0.19331783, 0.98744458, 0.38530825, 0.8523879 ]],\n\n        [[0.93716199, 0.43708433, 0.62260375, 0.97433381],\n         [0.12682549, 0.31498677, 0.83672613, 0.50459627],\n         [0.01149947, 0.85224212, 0.87238186, 0.14389125],\n         [0.74646289, 0.23290202, 0.23569815, 0.3068561 ],\n         [0.99385153, 0.8279165 , 0.89896968, 0.49065182]]]]), array([[[[[8.09411902e-02, 8.77480618e-01, 1.95925854e-01,\n           1.48304679e-01],\n          [4.88165714e-01, 3.54230045e-01, 1.69887694e-01,\n           7.50489004e-01],\n          [8.25665617e-01, 3.03964154e-01, 9.76463946e-01,\n           6.70098797e-01]],\n\n         [[8.62742883e-01, 6.49448775e-01, 9.06060439e-01,\n           3.94078532e-01],\n          [5.44005927e-01, 3.05527843e-01, 2.65391892e-01,\n           8.44793709e-01],\n          [7.19797870e-01, 5.53687153e-01, 3.17940431e-01,\n           3.36469882e-02]],\n\n         [[1.37065665e-01, 8.09744295e-01, 3.35636933e-01,\n           1.68765708e-02],\n          [8.91925571e-02, 9.25363637e-01, 3.10407215e-01,\n           8.73845913e-01],\n          [4.00857508e-01, 6.75980201e-01, 8.34951464e-01,\n           8.74249243e-01]],\n\n         [[3.85520384e-02, 2.31229580e-01, 6.96687598e-01,\n           6.33459373e-01],\n          [3.29471733e-01, 1.56309561e-02, 5.88391273e-03,\n           4.33851146e-01],\n          [2.23047171e-01, 2.76051772e-01, 5.41776004e-01,\n           4.17906138e-01]],\n\n         [[5.40560913e-01, 7.77625274e-01, 6.62387700e-01,\n           3.79428478e-02],\n          [3.33435008e-01, 1.84606728e-01, 3.33806208e-01,\n           2.82983426e-01],\n          [4.05404812e-01, 9.94090110e-01, 9.47190703e-01,\n           6.22038843e-01]]],\n\n\n        [[[9.56324521e-01, 1.07397515e-01, 3.17389336e-01,\n           4.39908727e-01],\n          [1.96749574e-01, 8.56594446e-01, 7.22504357e-03,\n           1.38319749e-01],\n          [6.48418435e-01, 9.50656658e-02, 9.08068697e-01,\n           8.12763148e-01]],\n\n         [[9.90881100e-01, 8.78762348e-01, 8.13109062e-01,\n           1.54603466e-01],\n          [7.15574368e-01, 7.00615306e-01, 8.02273995e-01,\n           5.53788975e-02],\n          [4.43098771e-01, 1.98029386e-01, 2.70270003e-01,\n           4.38174870e-01]],\n\n         [[5.64355297e-01, 9.00038679e-01, 5.04611246e-01,\n           5.22863908e-01],\n          [2.25846272e-01, 9.69083054e-01, 8.15325047e-02,\n           7.91654534e-01],\n          [4.35228699e-01, 8.97014811e-01, 2.70613208e-01,\n           5.78632168e-02]],\n\n         [[1.19028836e-01, 7.07221184e-01, 8.78250091e-01,\n           3.79056937e-01],\n          [9.84152382e-01, 2.13422914e-01, 9.69707983e-01,\n           3.14529716e-01],\n          [8.54123760e-01, 7.06797483e-02, 1.76502221e-01,\n           8.67537574e-01]],\n\n         [[9.48530898e-01, 9.64953133e-01, 8.70482311e-02,\n           1.22765899e-01],\n          [7.98038424e-01, 8.57743803e-01, 6.19129285e-01,\n           7.49358212e-01],\n          [4.38707560e-01, 2.66269584e-01, 2.55516694e-02,\n           5.47098141e-01]]]],\n\n\n\n       [[[[6.93917162e-01, 2.34851814e-01, 8.91866049e-02,\n           5.21096827e-01],\n          [7.15023175e-01, 1.16450836e-01, 4.93252244e-02,\n           9.95755559e-02],\n          [2.32085458e-01, 6.98717737e-01, 1.03282571e-01,\n           2.44828372e-01]],\n\n         [[5.32547309e-02, 7.50377095e-01, 8.96980461e-01,\n           3.05599623e-01],\n          [9.44927324e-02, 1.28632212e-01, 8.35861411e-01,\n           6.91716697e-01],\n          [7.47784674e-01, 5.43279982e-01, 6.08058572e-01,\n           3.70539423e-01]],\n\n         [[4.88895979e-01, 4.06365681e-02, 6.10333878e-01,\n           5.34094289e-01],\n          [2.16834228e-01, 7.56650427e-01, 1.53814556e-01,\n           9.44326755e-02],\n          [3.38679679e-01, 2.90182688e-01, 2.61553110e-01,\n           6.32650049e-01]],\n\n         [[9.39011779e-01, 5.07186954e-01, 9.82988402e-01,\n           6.78184131e-02],\n          [8.85714984e-01, 8.28190479e-02, 8.95257854e-01,\n           9.45116023e-01],\n          [5.02402814e-01, 5.71443940e-02, 4.44416133e-01,\n           6.85653366e-01]],\n\n         [[8.79680161e-01, 2.37850411e-01, 3.87897910e-01,\n           9.54920001e-01],\n          [1.32521649e-01, 2.73185401e-01, 9.92921261e-01,\n           8.69120378e-01],\n          [4.83963124e-01, 5.85669028e-01, 5.17478458e-01,\n           5.08549525e-01]]],\n\n\n        [[[5.58810809e-01, 1.92627325e-01, 6.63627512e-02,\n           6.55643408e-01],\n          [6.48559596e-01, 2.62844215e-02, 4.10510891e-01,\n           8.37392169e-01],\n          [4.25259772e-01, 1.21353228e-01, 5.22026148e-01,\n           7.65647461e-01]],\n\n         [[1.60816571e-01, 3.29452857e-01, 8.86110051e-01,\n           4.92926286e-01],\n          [7.36112979e-01, 4.24067061e-01, 2.26290298e-01,\n           4.81104193e-01],\n          [2.37584233e-01, 8.41190086e-01, 7.24569068e-02,\n           7.59915446e-01]],\n\n         [[1.46152960e-01, 7.34656697e-01, 6.69118520e-01,\n           3.32965741e-02],\n          [3.68921402e-01, 6.02526620e-01, 2.24587969e-01,\n           6.15036984e-01],\n          [4.55594494e-01, 4.20075776e-01, 6.56075792e-01,\n           7.31090969e-01]],\n\n         [[8.96568615e-01, 3.29437413e-01, 3.27078835e-01,\n           7.79177929e-01],\n          [7.75198888e-01, 7.54855618e-01, 3.14474197e-01,\n           1.21314554e-01],\n          [4.38721928e-01, 6.53376929e-01, 8.21847981e-01,\n           2.67935838e-01]],\n\n         [[3.18381309e-02, 2.75421315e-01, 9.32544060e-01,\n           7.03320661e-01],\n          [5.69472854e-01, 1.48866800e-01, 4.57285752e-01,\n           2.14336815e-01],\n          [1.16831219e-01, 6.19103824e-01, 3.61116744e-01,\n           2.41511477e-01]]]],\n\n\n\n       [[[[8.78493436e-01, 7.02040260e-01, 1.52971154e-01,\n           4.98780152e-01],\n          [7.01627281e-01, 8.86281671e-01, 1.97323633e-01,\n           8.63642549e-01],\n          [9.75586980e-01, 9.60765526e-01, 9.20078676e-01,\n           8.29586416e-01]],\n\n         [[4.11634347e-01, 8.56335449e-01, 8.26301997e-01,\n           6.28544344e-01],\n          [8.84687706e-02, 8.88157910e-01, 1.24251793e-01,\n           7.87894403e-01],\n          [2.17090476e-01, 5.84035172e-01, 6.53072840e-01,\n           1.30291786e-01]],\n\n         [[6.04721217e-01, 8.49048940e-01, 4.60487094e-01,\n           9.23375663e-01],\n          [6.66737563e-01, 9.51576304e-01, 3.24782229e-01,\n           6.53047840e-01],\n          [2.35952606e-01, 1.21200949e-01, 2.30108007e-02,\n           5.89431303e-01]],\n\n         [[2.63849043e-01, 4.45063475e-01, 9.12508759e-01,\n           1.25045773e-01],\n          [4.42795292e-04, 6.85714359e-01, 5.14871826e-01,\n           5.97624124e-01],\n          [4.34938771e-01, 9.20814997e-01, 7.00838812e-01,\n           1.99037902e-01]],\n\n         [[9.84689961e-01, 1.37348379e-01, 7.16792687e-01,\n           9.46293879e-01],\n          [4.71215987e-01, 1.41998056e-01, 8.35881141e-01,\n           7.95519625e-01],\n          [1.03959670e-01, 7.60814305e-01, 4.28497684e-01,\n           7.55175387e-02]]],\n\n\n        [[[5.46330184e-01, 3.50153319e-01, 3.59217053e-01,\n           4.28594718e-01],\n          [3.20627770e-01, 3.27873365e-01, 5.72761839e-01,\n           5.33938522e-01],\n          [4.78148150e-01, 7.47748901e-01, 9.44465944e-01,\n           9.17971131e-01]],\n\n         [[9.57307234e-02, 6.24623136e-01, 8.81645059e-01,\n           3.11668331e-01],\n          [8.24735014e-01, 5.45964978e-01, 7.66819551e-01,\n           4.84153415e-01],\n          [6.70002391e-01, 2.66315372e-01, 6.24435454e-01,\n           1.06571978e-01]],\n\n         [[1.57366542e-01, 3.40677659e-01, 5.08435750e-01,\n           2.02706181e-01],\n          [4.88267006e-01, 2.37222656e-01, 5.47618392e-01,\n           4.07298096e-01],\n          [5.72032154e-01, 3.87476841e-01, 9.79722246e-01,\n           7.49806343e-01]],\n\n         [[8.51244967e-01, 1.60892710e-01, 3.84453544e-01,\n           4.03793830e-01],\n          [8.12456776e-01, 3.98782953e-01, 6.17724742e-01,\n           6.82022582e-01],\n          [9.09164748e-01, 1.39508650e-02, 8.78318035e-01,\n           9.35187328e-01]],\n\n         [[8.48225928e-01, 6.59023964e-01, 1.41084634e-01,\n           8.78566171e-01],\n          [6.99350127e-01, 3.43624263e-01, 5.73943215e-01,\n           2.52801411e-01],\n          [6.25265364e-01, 9.09587666e-01, 3.38925944e-01,\n           1.83492897e-02]]]]])]",
    "ans4": null,
    "ans5": null
  }
}