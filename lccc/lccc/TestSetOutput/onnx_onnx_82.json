{
  "input_header": "def SequenceEraseImpl( sequence: list[np.ndarray], position: int | None = None ) -> list[np.ndarray | None]:",
  "input_docstring": null,
  "output_code": "def SequenceEraseImpl(\n    sequence: list[np.ndarray], position: int | None = None\n) -> list[np.ndarray | None]:\n    if position is None:\n        position = -1\n    del sequence[position]\n    return sequence",
  "input_contexts": [
    {
      "id": "onnx_onnx_82_1",
      "input_code": "    def export() -> None:\n        def make_graph(\n            nodes: list[onnx.helper.NodeProto],\n            input_shapes: list[typing.Sequence[str | int] | None],\n            output_shapes: list[typing.Sequence[str | int] | None],\n            input_names: list[str],\n            output_names: list[str],\n            input_types: list[TensorProto.DataType],\n            output_types: list[TensorProto.DataType],\n            initializers: list[TensorProto] | None = None,\n        ) -> onnx.helper.GraphProto:\n            graph = onnx.helper.make_graph(\n                nodes=nodes,\n                name=\"Sequence\",\n                inputs=[\n                    onnx.helper.make_tensor_value_info(name, input_type, input_shape)\n                    for name, input_type, input_shape in zip(\n                        input_names, input_types, input_shapes\n                    )\n                ],\n                outputs=[\n                    onnx.helper.make_tensor_value_info(name, output_type, output_shape)\n                    for name, output_type, output_shape in zip(\n                        output_names, output_types, output_shapes\n                    )\n                ],\n                initializer=initializers,\n            )\n            return graph\n\n        seq_empty_node = onnx.helper.make_node(\"SequenceEmpty\", [], [\"Seq_empty\"])\n        seq_insert_node = onnx.helper.make_node(\n            \"SequenceInsert\", [\"Seq_empty\", \"X\"], [\"Seq_1\"]\n        )\n        seq_insert_node2 = onnx.helper.make_node(\n            \"SequenceInsert\", [\"Seq_1\", \"Y\"], [\"Seq_2\"]\n        )\n        seq_insert_node3 = onnx.helper.make_node(\n            \"SequenceInsert\", [\"Seq_2\", \"Z\", \"pos\"], [\"Seq_3\"]\n        )\n        seq_at_node = onnx.helper.make_node(\"SequenceAt\", [\"Seq_3\", \"pos_at\"], [\"out\"])\n\n        x_shape = [2, 3, 4]\n        y_shape = [1, 3, 4]\n        z_shape = [3, 3, 4]\n        out_shape = [None, 3, 4]\n\n        x = np.ones(x_shape, dtype=np.float32)\n        y = np.zeros(y_shape, dtype=np.float32)\n        z = np.ones(z_shape, dtype=np.float32) * 2\n        pos_val = 1\n        pos_at_val = 2\n\n        out = SequenceEmptyImpl()\n        out = SequenceInsertImpl(out, x)\n        out = SequenceInsertImpl(out, y)\n        out = SequenceInsertImpl(out, z, pos_val)\n        out = SequenceAtImpl(out, pos_at_val)\n        assert np.array_equal(out, y)\n\n        pos = onnx.helper.make_tensor(\"pos\", TensorProto.INT64, (), (pos_val,))\n        pos_at = onnx.helper.make_tensor(\"pos_at\", TensorProto.INT64, (), (pos_at_val,))\n\n        graph = make_graph(\n            [\n                seq_empty_node,\n                seq_insert_node,\n                seq_insert_node2,\n                seq_insert_node3,\n                seq_at_node,\n            ],\n            [x_shape, y_shape, z_shape, [], []],            [out_shape],            [\"X\", \"Y\", \"Z\", \"pos\", \"pos_at\"],\n            [\"out\"],\n            [onnx.TensorProto.FLOAT] * 3 + [onnx.TensorProto.INT64] * 2,            [onnx.TensorProto.FLOAT],\n            [pos, pos_at],\n        )\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(model, inputs=[x, y, z], outputs=[out], name=\"test_sequence_model1\")\n\n        seq_construct_node = onnx.helper.make_node(\n            \"SequenceConstruct\", [\"X\", \"Y\", \"Z\"], [\"seq_1\"]\n        )\n        seq_erase_node = onnx.helper.make_node(\n            \"SequenceErase\", [\"seq_1\", \"pos_erase\"], [\"seq_2\"]\n        )\n        seq_at_node = onnx.helper.make_node(\"SequenceAt\", [\"seq_2\", \"pos_at\"], [\"out\"])\n\n        tensor_shape = [2, 3, 4]\n\n        x = np.ones(tensor_shape, dtype=np.float32)\n        y = np.zeros(tensor_shape, dtype=np.float32)\n        z = np.ones(tensor_shape, dtype=np.float32) * 2\n        pos_erase_val = 1\n        pos_at_val = 1\n\n        out = SequenceConstructImpl(x, y, z)\n        out = SequenceEraseImpl(out, pos_erase_val)\n        out = SequenceAtImpl(out, pos_at_val)\n        assert np.array_equal(out, z)\n\n        pos_erase = onnx.helper.make_tensor(\n            \"pos_erase\", TensorProto.INT64, (), (pos_erase_val,)\n        )\n        pos_at = onnx.helper.make_tensor(\"pos_at\", TensorProto.INT64, (), (pos_at_val,))\n\n        graph = make_graph(\n            [seq_construct_node, seq_erase_node, seq_at_node],\n            [tensor_shape, tensor_shape, tensor_shape, [], []],            [tensor_shape],            [\"X\", \"Y\", \"Z\", \"pos_erase\", \"pos_at\"],\n            [\"out\"],\n            [onnx.TensorProto.FLOAT] * 3 + [onnx.TensorProto.INT64] * 2,            [onnx.TensorProto.FLOAT],\n            [pos_erase, pos_at],\n        )\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(model, inputs=[x, y, z], outputs=[out], name=\"test_sequence_model2\")\n\n        seq_construct_node = onnx.helper.make_node(\n            \"SequenceConstruct\", [\"X\", \"Y\", \"Z\"], [\"seq_1\"]\n        )\n        seq_erase_node = onnx.helper.make_node(\n            \"SequenceErase\", [\"seq_1\", \"pos_erase\"], [\"seq_2\"]\n        )\n        seq_insert_node = onnx.helper.make_node(\n            \"SequenceInsert\", [\"seq_2\", \"X\", \"pos_insert\"], [\"seq_3\"]\n        )\n        seq_at_node = onnx.helper.make_node(\"SequenceAt\", [\"seq_3\", \"pos_at\"], [\"out\"])\n\n        tensor_shape = [2, 3, 4]\n\n        x = np.ones(tensor_shape, dtype=np.float32)\n        y = np.zeros(tensor_shape, dtype=np.float32)\n        z = np.ones(tensor_shape, dtype=np.float32) * 2\n        pos_erase_val = -3\n        pos_insert_val = -1\n        pos_at_val = -1\n        out = SequenceConstructImpl(x, y, z)\n        out = SequenceEraseImpl(out, pos_erase_val)\n        out = SequenceInsertImpl(out, x, pos_insert_val)\n        out = SequenceAtImpl(out, pos_at_val)\n        assert np.array_equal(out, z)\n\n        pos_erase = onnx.helper.make_tensor(\n            \"pos_erase\", TensorProto.INT64, (), (pos_erase_val,)\n        )\n        pos_insert = onnx.helper.make_tensor(\n            \"pos_insert\", TensorProto.INT64, (), (pos_insert_val,)\n        )\n        pos_at = onnx.helper.make_tensor(\"pos_at\", TensorProto.INT64, (), (pos_at_val,))\n\n        graph = make_graph(\n            [seq_construct_node, seq_erase_node, seq_insert_node, seq_at_node],\n            [tensor_shape, tensor_shape, tensor_shape, [], [], []],            [tensor_shape],            [\"X\", \"Y\", \"Z\", \"pos_erase\", \"pos_insert\", \"pos_at\"],\n            [\"out\"],\n            [onnx.TensorProto.FLOAT] * 3 + [onnx.TensorProto.INT64] * 3,            [onnx.TensorProto.FLOAT],\n            [pos_erase, pos_insert, pos_at],\n        )\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(model, inputs=[x, y, z], outputs=[out], name=\"test_sequence_model3\")\n\n        seq_construct_node = onnx.helper.make_node(\n            \"SequenceConstruct\", [\"X\", \"Y\", \"Z\"], [\"seq_1\"]\n        )\n        seq_concat_node = onnx.helper.make_node(\n            \"ConcatFromSequence\", [\"seq_1\"], [\"out\"], axis=1\n        )\n\n        tensor_shape = [2, 3, 4]\n        concat_out_shape = [2, None, 4]\n\n        x = np.ones(tensor_shape, dtype=np.float32)\n        y = np.zeros(tensor_shape, dtype=np.float32)\n        z = np.ones(tensor_shape, dtype=np.float32) * 2\n        out = SequenceConstructImpl(x, y, z)\n        concat_out = ConcatFromSequenceImpl(out, 1)\n\n        graph = make_graph(\n            [seq_construct_node, seq_concat_node],\n            [tensor_shape] * 3,            [concat_out_shape],            [\"X\", \"Y\", \"Z\"],\n            [\"out\"],\n            [onnx.TensorProto.FLOAT] * 3,            [onnx.TensorProto.FLOAT],\n        )\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(\n            model, inputs=[x, y, z], outputs=[concat_out], name=\"test_sequence_model4\"\n        )\n\n        seq_construct_node = onnx.helper.make_node(\n            \"SequenceConstruct\", [\"X\", \"Y\", \"Z\"], [\"seq_1\"]\n        )\n        seq_concat_node = onnx.helper.make_node(\n            \"ConcatFromSequence\", [\"seq_1\"], [\"out\"], axis=-1, new_axis=1\n        )\n\n        tensor_shape = [2, 3, 4]\n        concat_out_shape = [2, 3, 4, 3]\n\n        x = np.ones(tensor_shape, dtype=np.float32)\n        y = np.zeros(tensor_shape, dtype=np.float32)\n        z = np.ones(tensor_shape, dtype=np.float32) * 2\n        out = SequenceConstructImpl(x, y, z)\n        concat_out = ConcatFromSequenceImpl(out, -1, 1)\n\n        graph = make_graph(\n            [seq_construct_node, seq_concat_node],\n            [tensor_shape] * 3,            [concat_out_shape],            [\"X\", \"Y\", \"Z\"],\n            [\"out\"],\n            [onnx.TensorProto.FLOAT] * 3,            [onnx.TensorProto.FLOAT],\n        )\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(\n            model, inputs=[x, y, z], outputs=[concat_out], name=\"test_sequence_model5\"\n        )\n\n        seq_split_node = onnx.helper.make_node(\n            \"SplitToSequence\", [\"X\"], [\"seq_1\"], axis=-1\n        )\n        seq_len_node = onnx.helper.make_node(\"SequenceLength\", [\"seq_1\"], [\"len\"])\n\n        tensor_shape = [2, 3, 4]\n        len_shape = []\n\n        x = np.ones(tensor_shape, dtype=np.float32)\n        out = SplitToSequenceImpl(x, axis=-1)\n        out = SequenceLengthImpl(out)\n        assert np.array_equal(out, np.int64(4))\n\n        graph = onnx.helper.make_graph(\n            nodes=[seq_split_node, seq_len_node],\n            name=\"Sequence\",\n            inputs=[\n                onnx.helper.make_tensor_value_info(\n                    \"X\", onnx.TensorProto.FLOAT, tensor_shape\n                )\n            ],\n            outputs=[\n                onnx.helper.make_tensor_value_info(\n                    \"len\", onnx.TensorProto.INT64, len_shape\n                )\n            ],\n        )\n\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(model, inputs=[x], outputs=[out], name=\"test_sequence_model6\")\n\n        seq_split_node = onnx.helper.make_node(\n            \"SplitToSequence\", [\"X\"], [\"seq_1\"], axis=0, keepdims=0\n        )\n        seq_at_node = onnx.helper.make_node(\"SequenceAt\", [\"seq_1\", \"pos_at\"], [\"out\"])\n\n        tensor_shape = [2, 3, 4]\n        out_shape = [3, 4]\n\n        x = np.random.rand(*tensor_shape)\n        pos_at_val = 1\n        out = SplitToSequenceImpl(x, axis=0, keepdims=0)\n        out = SequenceAtImpl(out, pos_at_val)\n        assert np.array_equal(out, x[pos_at_val])\n\n        pos_at = onnx.helper.make_tensor(\"pos_at\", TensorProto.INT64, (), (pos_at_val,))\n\n        graph = make_graph(\n            [seq_split_node, seq_at_node],\n            [tensor_shape, []],            [out_shape],            [\"X\", \"pos_at\"],\n            [\"out\"],\n            [onnx.TensorProto.DOUBLE, onnx.TensorProto.INT64],\n            [onnx.TensorProto.DOUBLE],\n            [pos_at],\n        )\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(model, inputs=[x], outputs=[out], name=\"test_sequence_model7\")\n\n        seq_split_node = onnx.helper.make_node(\n            \"SplitToSequence\", [\"X\", \"Splits\"], [\"seq_1\"]\n        )\n        seq_len_node = onnx.helper.make_node(\"SequenceLength\", [\"seq_1\"], [\"len\"])\n\n        tensor_shape = [\"n\"]\n        splits_shape = [3]\n\n        x = np.array([]).astype(np.float32)\n        splits = np.array([0, 0, 0]).astype(np.int64)\n        out_len = np.int64(3)\n\n        graph = onnx.helper.make_graph(\n            nodes=[seq_split_node, seq_len_node],\n            name=\"Sequence\",\n            inputs=[\n                onnx.helper.make_tensor_value_info(\n                    \"X\", onnx.TensorProto.FLOAT, tensor_shape\n                ),                onnx.helper.make_tensor_value_info(\n                    \"Splits\", onnx.TensorProto.INT64, splits_shape\n                ),\n            ],            outputs=[\n                onnx.helper.make_tensor_value_info(\n                    \"len\", onnx.TensorProto.INT64, len_shape\n                )\n            ],\n        )\n\n        model = onnx.helper.make_model_gen_version(\n            graph,\n            producer_name=\"backend-test\",\n            opset_imports=[onnx.helper.make_opsetid(\"\", 12)],\n        )\n        expect(\n            model, inputs=[x, splits], outputs=[out_len], name=\"test_sequence_model8\"\n        )\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport numpy as np\n\n<testcase_1>\nsequence = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9])]\nposition = 1\n\n<testcase_2>\nsequence = [np.array([10, 20]), np.array([30, 40]), np.array([50, 60]), np.array([70, 80])]\nposition = None\n\n<testcase_3>\nsequence = [np.array([0.1, 0.2]), np.array([0.3, 0.4]), np.array([0.5, 0.6])]\nposition = 0\n\n<testcase_4>\nsequence = [np.array([100, 200, 300]), np.array([400, 500, 600]), np.array([700, 800, 900])]\nposition = -2\n\n<testcase_5>\nsequence = [np.array([1.1, 2.2, 3.3]), np.array([4.4, 5.5, 6.6]), np.array([7.7, 8.8, 9.9]), np.array([10.10, 11.11, 12.12])]\nposition = 3"
  ],
  "gpt_output": "<needimport>\nimport numpy as np\n\n<testcase_1>\nsequence = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9])]\nposition = 1\n\n<testcase_2>\nsequence = [np.array([10, 20]), np.array([30, 40]), np.array([50, 60]), np.array([70, 80])]\nposition = None\n\n<testcase_3>\nsequence = [np.array([0.1, 0.2]), np.array([0.3, 0.4]), np.array([0.5, 0.6])]\nposition = 0\n\n<testcase_4>\nsequence = [np.array([100, 200, 300]), np.array([400, 500, 600]), np.array([700, 800, 900])]\nposition = -2\n\n<testcase_5>\nsequence = [np.array([1.1, 2.2, 3.3]), np.array([4.4, 5.5, 6.6]), np.array([7.7, 8.8, 9.9]), np.array([10.10, 11.11, 12.12])]\nposition = 3",
  "needimport": "import numpy as np\n\n",
  "test_results": {
    "ans1": [
      [
        1,
        2,
        3
      ],
      [
        7,
        8,
        9
      ]
    ],
    "ans2": [
      [
        10,
        20
      ],
      [
        30,
        40
      ],
      [
        50,
        60
      ]
    ],
    "ans3": [
      [
        0.3,
        0.4
      ],
      [
        0.5,
        0.6
      ]
    ],
    "ans4": [
      [
        100,
        200,
        300
      ],
      [
        700,
        800,
        900
      ]
    ],
    "ans5": [
      [
        1.1,
        2.2,
        3.3
      ],
      [
        4.4,
        5.5,
        6.6
      ],
      [
        7.7,
        8.8,
        9.9
      ]
    ]
  }
}