{
  "input_header": "def printTable(items, header):",
  "input_docstring": null,
  "output_code": "    def printTable(items, header):\n        colLen = []\n        for i, col in enumerate(header):\n            rowMaxLen = max([len(row[i]) for row in items])\n            colLen.append(max(rowMaxLen, len(col)))\n\n        outputFormat = ' '.join(['{%d:%ds} ' % (num, width) for num, width in enumerate(colLen)])\n\n        print(outputFormat.format(*header))\n        print('  '.join(['-' * itemLen for itemLen in colLen]))\n\n        for row in items:\n            print(outputFormat.format(*row))",
  "input_contexts": [
    {
      "id": "fortra_impacket_303_1",
      "input_code": "    def run(self):\n        if self.__kdcHost is not None and self.__targetDomain == self.__domain:\n            self.__target = self.__kdcHost\n        else:\n            if self.__kdcIP is not None and self.__targetDomain == self.__domain:\n                self.__target = self.__kdcIP\n            else:\n                self.__target = self.__targetDomain\n\n            if self.__doKerberos:\n                logging.info('Getting machine hostname')\n                self.__target = self.getMachineName(self.__target)\n\n        try:\n            ldapConnection = ldap.LDAPConnection('ldap://%s' % self.__target, self.baseDN, self.__kdcIP)\n            if self.__doKerberos is not True:\n                ldapConnection.login(self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash)\n            else:\n                ldapConnection.kerberosLogin(self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash,\n                                             self.__aesKey, kdcHost=self.__kdcIP)\n        except ldap.LDAPSessionError as e:\n            if str(e).find('strongerAuthRequired') >= 0:\n                ldapConnection = ldap.LDAPConnection('ldaps://%s' % self.__target, self.baseDN, self.__kdcIP)\n                if self.__doKerberos is not True:\n                    ldapConnection.login(self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash)\n                else:\n                    ldapConnection.kerberosLogin(self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash,\n                                                 self.__aesKey, kdcHost=self.__kdcIP)\n            else:\n                if str(e).find('NTLMAuthNegotiate') >= 0:\n                    logging.critical(\"NTLM negotiation failed. Probably NTLM is disabled. Try to use Kerberos \"\n                                     \"authentication instead\")\n                else:\n                    if self.__kdcIP is not None and self.__kdcHost is not None:\n                        logging.critical(\"If the credentials are valid, check the hostname and IP address of KDC. They \"\n                                         \"must match exactly each other\")\n                raise\n\n        searchFilter = \"(&(|(UserAccountControl:1.2.840.113556.1.4.803:=16777216)(UserAccountControl:1.2.840.113556.1.4.803:=\" \\\n                       \"524288)(msDS-AllowedToDelegateTo=*)(msDS-AllowedToActOnBehalfOfOtherIdentity=*))\" \\\n                       \"(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(UserAccountControl:1.2.840.113556.1.4.803:=8192)))\"\n\n        try:\n            resp = ldapConnection.search(searchFilter=searchFilter,\n                                         attributes=['sAMAccountName',\n                                                     'pwdLastSet', 'userAccountControl', 'objectCategory',\n                                                     'msDS-AllowedToActOnBehalfOfOtherIdentity', 'msDS-AllowedToDelegateTo'],\n                                         sizeLimit=999)\n        except ldap.LDAPSearchError as e:\n            if e.getErrorString().find('sizeLimitExceeded') >= 0:\n                logging.debug('sizeLimitExceeded exception caught, giving up and processing the data received')\n                resp = e.getAnswers()\n                pass\n            else:\n                raise\n\n        answers = []\n        logging.debug('Total of records returned %d' % len(resp))\n        \n        for item in resp:\n            if isinstance(item, ldapasn1.SearchResultEntry) is not True:\n                continue\n            mustCommit = False\n            sAMAccountName =  ''\n            userAccountControl = 0\n            delegation = ''\n            objectType = ''\n            rightsTo = []\n            protocolTransition = 0\n\n            try:\n                for attribute in item['attributes']:\n                    if str(attribute['type']) == 'sAMAccountName':\n                        sAMAccountName = str(attribute['vals'][0])\n                        mustCommit = True\n                    elif str(attribute['type']) == 'userAccountControl':\n                        userAccountControl = str(attribute['vals'][0])\n                        if int(userAccountControl) & UF_TRUSTED_FOR_DELEGATION:\n                            delegation = 'Unconstrained'\n                            rightsTo.append(\"N/A\")\n                        elif int(userAccountControl) & UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION:\n                            delegation = 'Constrained w/ Protocol Transition'\n                            protocolTransition = 1\n                    elif str(attribute['type']) == 'objectCategory':\n                        objectType = str(attribute['vals'][0]).split('=')[1].split(',')[0]\n                    elif str(attribute['type']) == 'msDS-AllowedToDelegateTo':\n                        if protocolTransition == 0:\n                            delegation = 'Constrained'\n                        for delegRights in attribute['vals']:\n                            rightsTo.append(str(delegRights))\n             \n                    if str(attribute['type']) == 'msDS-AllowedToActOnBehalfOfOtherIdentity':\n                        rbcdRights = []\n                        rbcdObjType = []\n                        searchFilter = '(&(|'\n                        sd = ldaptypes.SR_SECURITY_DESCRIPTOR(data=bytes(attribute['vals'][0]))\n                        for ace in sd['Dacl'].aces:\n                            searchFilter = searchFilter + \"(objectSid=\"+ace['Ace']['Sid'].formatCanonical()+\")\"\n                        searchFilter = searchFilter + \")(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))\"\n                        delegUserResp = ldapConnection.search(searchFilter=searchFilter,attributes=['sAMAccountName', 'objectCategory'],sizeLimit=999)\n                        for item2 in delegUserResp:\n                            if isinstance(item2, ldapasn1.SearchResultEntry) is not True:\n                                continue\n                            rbcdRights.append(str(item2['attributes'][0]['vals'][0]))\n                            rbcdObjType.append(str(item2['attributes'][1]['vals'][0]).split('=')[1].split(',')[0])\n\t\t\t\t\t\t\t\n                        if mustCommit is True:\n                            if int(userAccountControl) & UF_ACCOUNTDISABLE:\n                                logging.debug('Bypassing disabled account %s ' % sAMAccountName)\n                            else:\n                                for rights, objType in zip(rbcdRights,rbcdObjType):\n                                    spnExists = checkIfSPNExists(ldapConnection, sAMAccountName, rights)\n                                    answers.append([rights, objType, 'Resource-Based Constrained', sAMAccountName, str(spnExists)])\n                        \n                if delegation in ['Unconstrained', 'Constrained', 'Constrained w/ Protocol Transition']:\n                    if mustCommit is True:\n                            if int(userAccountControl) & UF_ACCOUNTDISABLE:\n                                logging.debug('Bypassing disabled account %s ' % sAMAccountName)\n                            else:\n                                for rights in rightsTo:\n                                    spnExists = checkIfSPNExists(ldapConnection, sAMAccountName, rights)\n                                    answers.append([sAMAccountName, objectType, delegation, rights, str(spnExists)])\n            except Exception as e:\n                logging.error('Skipping item, cannot process due to error %s' % str(e))\n                pass\n\n        if len(answers) > 0:\n            self.printTable(answers, header=[\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"])\n            print('\\n\\n')\n        else:\n            print(\"No entries found!\")\n"
    }
  ],
  "generated_inputs": [
    "```python\n<needimport>\nimport random\nimport string\n\n<testcase_1>\nitems = [\n    [\"Alice\", \"User\", \"Unconstrained\", \"N/A\", \"True\"],\n    [\"Bob\", \"User\", \"Constrained\", \"Service1\", \"False\"],\n    [\"Charlie\", \"Computer\", \"Constrained w/ Protocol Transition\", \"Service2\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_2>\nitems = [\n    [\"Server01\", \"Computer\", \"Unconstrained\", \"N/A\", \"False\"],\n    [\"Database01\", \"Service\", \"Constrained\", \"DBAccess\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_3>\nitems = [\n    [\"User1\", \"User\", \"Constrained\", \"WebService\", \"True\"],\n    [\"User2\", \"User\", \"Constrained\", \"FileService\", \"False\"],\n    [\"User3\", \"User\", \"Unconstrained\", \"N/A\", \"True\"],\n    [\"User4\", \"User\", \"Constrained w/ Protocol Transition\", \"MailService\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_4>\nitems = [\n    [\"Admin\", \"Admin\", \"Unconstrained\", \"N/A\", \"True\"],\n    [\"Guest\", \"User\", \"Constrained\", \"LimitedAccess\", \"False\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_5>\nitems = [\n    [\"ServiceAccount\", \"Service\", \"Constrained\", \"APIService\", \"True\"],\n    [\"BackupService\", \"Service\", \"Constrained w/ Protocol Transition\", \"BackupAccess\", \"False\"],\n    [\"NetworkDevice\", \"Device\", \"Unconstrained\", \"N/A\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n```"
  ],
  "gpt_output": "```python\n<needimport>\nimport random\nimport string\n\n<testcase_1>\nitems = [\n    [\"Alice\", \"User\", \"Unconstrained\", \"N/A\", \"True\"],\n    [\"Bob\", \"User\", \"Constrained\", \"Service1\", \"False\"],\n    [\"Charlie\", \"Computer\", \"Constrained w/ Protocol Transition\", \"Service2\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_2>\nitems = [\n    [\"Server01\", \"Computer\", \"Unconstrained\", \"N/A\", \"False\"],\n    [\"Database01\", \"Service\", \"Constrained\", \"DBAccess\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_3>\nitems = [\n    [\"User1\", \"User\", \"Constrained\", \"WebService\", \"True\"],\n    [\"User2\", \"User\", \"Constrained\", \"FileService\", \"False\"],\n    [\"User3\", \"User\", \"Unconstrained\", \"N/A\", \"True\"],\n    [\"User4\", \"User\", \"Constrained w/ Protocol Transition\", \"MailService\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_4>\nitems = [\n    [\"Admin\", \"Admin\", \"Unconstrained\", \"N/A\", \"True\"],\n    [\"Guest\", \"User\", \"Constrained\", \"LimitedAccess\", \"False\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n\n<testcase_5>\nitems = [\n    [\"ServiceAccount\", \"Service\", \"Constrained\", \"APIService\", \"True\"],\n    [\"BackupService\", \"Service\", \"Constrained w/ Protocol Transition\", \"BackupAccess\", \"False\"],\n    [\"NetworkDevice\", \"Device\", \"Unconstrained\", \"N/A\", \"True\"]\n]\nheader = [\"AccountName\", \"AccountType\", \"DelegationType\", \"DelegationRightsTo\", \"SPN Exists\"]\n```",
  "needimport": "import random\nimport string\n\n",
  "test_results": {
    "ans1": "AccountName  AccountType  DelegationType                      DelegationRightsTo  SPN Exists \n-----------  -----------  ----------------------------------  ------------------  ----------\nAlice        User         Unconstrained                       N/A                 True       \nBob          User         Constrained                         Service1            False      \nCharlie      Computer     Constrained w/ Protocol Transition  Service2            True       \n",
    "ans2": "AccountName  AccountType  DelegationType  DelegationRightsTo  SPN Exists \n-----------  -----------  --------------  ------------------  ----------\nServer01     Computer     Unconstrained   N/A                 False      \nDatabase01   Service      Constrained     DBAccess            True       \n",
    "ans3": "AccountName  AccountType  DelegationType                      DelegationRightsTo  SPN Exists \n-----------  -----------  ----------------------------------  ------------------  ----------\nUser1        User         Constrained                         WebService          True       \nUser2        User         Constrained                         FileService         False      \nUser3        User         Unconstrained                       N/A                 True       \nUser4        User         Constrained w/ Protocol Transition  MailService         True       \n",
    "ans4": "AccountName  AccountType  DelegationType  DelegationRightsTo  SPN Exists \n-----------  -----------  --------------  ------------------  ----------\nAdmin        Admin        Unconstrained   N/A                 True       \nGuest        User         Constrained     LimitedAccess       False      \n",
    "ans5": "AccountName     AccountType  DelegationType                      DelegationRightsTo  SPN Exists \n--------------  -----------  ----------------------------------  ------------------  ----------\nServiceAccount  Service      Constrained                         APIService          True       \nBackupService   Service      Constrained w/ Protocol Transition  BackupAccess        False      \nNetworkDevice   Device       Unconstrained                       N/A                 True       \n"
  }
}