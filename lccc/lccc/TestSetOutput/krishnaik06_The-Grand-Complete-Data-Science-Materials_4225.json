{
  "input_header": "def _pattern_permute(self, basic_pattern, options, basic_result):",
  "input_docstring": "pattern_permute takes a basic pattern and its result and clones\nthe pattern according to the modifications described in the $options\nparameter. It returns a list of all cloned patterns.",
  "output_code": "    def _pattern_permute(self, basic_pattern, options, basic_result):\n        \n        patterns = [(basic_pattern, basic_result)]\n\n        if \"4\" in options:\n            res = patterns[-1][1]\n            for i in range(4):\n                patterns.append(\n                    (self._string_permute(patterns[-1][0], ROTATION_MATRIX), res)\n                )\n        if \"M\" in options:\n            n = len(patterns)\n            for pattern, res in patterns[:n]:\n                patterns.append((self._string_permute(pattern, MIRROR_MATRIX), res))\n\n        if \"N\" in options:\n            n = len(patterns)\n            for pattern, res in patterns[:n]:\n                pattern = pattern.replace(\"0\", \"Z\").replace(\"1\", \"0\").replace(\"Z\", \"1\")\n                res = 1 - int(res)\n                patterns.append((pattern, res))\n\n        return patterns",
  "input_contexts": [
    {
      "id": "krishnaik06_The-Grand-Complete-Data-Science-Materials_4225_1",
      "input_code": "    def build_lut(self):\n        \n        self.build_default_lut()\n        patterns = []\n\n        for p in self.patterns:\n            m = re.search(r\"(\\w*):?\\s*\\((.+?)\\)\\s*->\\s*(\\d)\", p.replace(\"\\n\", \"\"))\n            if not m:\n                msg = 'Syntax error in pattern \"' + p + '\"'\n                raise Exception(msg)\n            options = m.group(1)\n            pattern = m.group(2)\n            result = int(m.group(3))\n\n            pattern = pattern.replace(\" \", \"\").replace(\"\\n\", \"\")\n\n            patterns += self._pattern_permute(pattern, options, result)\n\n        for i, pattern in enumerate(patterns):\n            p = pattern[0].replace(\".\", \"X\").replace(\"X\", \"[01]\")\n            p = re.compile(p)\n            patterns[i] = (p, pattern[1])\n\n        for i in range(LUT_SIZE):\n            bitpattern = bin(i)[2:]\n            bitpattern = (\"0\" * (9 - len(bitpattern)) + bitpattern)[::-1]\n\n            for p, r in patterns:\n                if p.match(bitpattern):\n                    self.lut[i] = [0, 1][r]\n\n        return self.lut\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport re\n\n<testcase_1>\nbasic_pattern = \"010010111\"\noptions = \"4M\"\nbasic_result = 1\n\n<testcase_2>\nbasic_pattern = \"101001000\"\noptions = \"M\"\nbasic_result = 0\n\n<testcase_3>\nbasic_pattern = \"111000111\"\noptions = \"4N\"\nbasic_result = 1\n\n<testcase_4>\nbasic_pattern = \"000111000\"\noptions = \"N\"\nbasic_result = 0\n\n<testcase_5>\nbasic_pattern = \"110110110\"\noptions = \"4MN\"\nbasic_result = 1"
  ],
  "gpt_output": "<needimport>\nimport re\n\n<testcase_1>\nbasic_pattern = \"010010111\"\noptions = \"4M\"\nbasic_result = 1\n\n<testcase_2>\nbasic_pattern = \"101001000\"\noptions = \"M\"\nbasic_result = 0\n\n<testcase_3>\nbasic_pattern = \"111000111\"\noptions = \"4N\"\nbasic_result = 1\n\n<testcase_4>\nbasic_pattern = \"000111000\"\noptions = \"N\"\nbasic_result = 0\n\n<testcase_5>\nbasic_pattern = \"110110110\"\noptions = \"4MN\"\nbasic_result = 1",
  "needimport": "import re\n\n",
  "test_results": {
    "ans1": [
      [
        "010010111",
        1
      ],
      [
        "100111100",
        1
      ],
      [
        "111010010",
        1
      ],
      [
        "001111001",
        1
      ],
      [
        "010010111",
        1
      ],
      [
        "010010111",
        1
      ],
      [
        "001111001",
        1
      ],
      [
        "111010010",
        1
      ],
      [
        "100111100",
        1
      ],
      [
        "010010111",
        1
      ]
    ],
    "ans2": [
      [
        "101001000",
        0
      ],
      [
        "101100000",
        0
      ]
    ],
    "ans3": [
      [
        "111000111",
        1
      ],
      [
        "101101101",
        1
      ],
      [
        "111000111",
        1
      ],
      [
        "101101101",
        1
      ],
      [
        "111000111",
        1
      ],
      [
        "000111000",
        0
      ],
      [
        "010010010",
        0
      ],
      [
        "000111000",
        0
      ],
      [
        "010010010",
        0
      ],
      [
        "000111000",
        0
      ]
    ],
    "ans4": [
      [
        "000111000",
        0
      ],
      [
        "111000111",
        1
      ]
    ],
    "ans5": [
      [
        "110110110",
        1
      ],
      [
        "111111000",
        1
      ],
      [
        "011011011",
        1
      ],
      [
        "000111111",
        1
      ],
      [
        "110110110",
        1
      ],
      [
        "011011011",
        1
      ],
      [
        "111111000",
        1
      ],
      [
        "110110110",
        1
      ],
      [
        "000111111",
        1
      ],
      [
        "011011011",
        1
      ],
      [
        "001001001",
        0
      ],
      [
        "000000111",
        0
      ],
      [
        "100100100",
        0
      ],
      [
        "111000000",
        0
      ],
      [
        "001001001",
        0
      ],
      [
        "100100100",
        0
      ],
      [
        "000000111",
        0
      ],
      [
        "001001001",
        0
      ],
      [
        "111000000",
        0
      ],
      [
        "100100100",
        0
      ]
    ]
  }
}