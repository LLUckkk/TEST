{
  "input_header": "def group_text_box(polys, slope_ths = 0.1, ycenter_ths = 0.5, height_ths = 0.5, width_ths = 1.0, add_margin = 0.05, sort_output = True):",
  "input_docstring": null,
  "output_code": "def group_text_box(polys, slope_ths = 0.1, ycenter_ths = 0.5, height_ths = 0.5, width_ths = 1.0, add_margin = 0.05, sort_output = True):\n    horizontal_list, free_list,combined_list, merged_list = [],[],[],[]\n\n    for poly in polys:\n        slope_up = (poly[3]-poly[1])/np.maximum(10, (poly[2]-poly[0]))\n        slope_down = (poly[5]-poly[7])/np.maximum(10, (poly[4]-poly[6]))\n        if max(abs(slope_up), abs(slope_down)) < slope_ths:\n            x_max = max([poly[0],poly[2],poly[4],poly[6]])\n            x_min = min([poly[0],poly[2],poly[4],poly[6]])\n            y_max = max([poly[1],poly[3],poly[5],poly[7]])\n            y_min = min([poly[1],poly[3],poly[5],poly[7]])\n            horizontal_list.append([x_min, x_max, y_min, y_max, 0.5*(y_min+y_max), y_max-y_min])\n        else:\n            height = np.linalg.norm([poly[6]-poly[0],poly[7]-poly[1]])\n            width = np.linalg.norm([poly[2]-poly[0],poly[3]-poly[1]])\n\n            margin = int(1.44*add_margin*min(width, height))\n\n            theta13 = abs(np.arctan( (poly[1]-poly[5])/np.maximum(10, (poly[0]-poly[4]))))\n            theta24 = abs(np.arctan( (poly[3]-poly[7])/np.maximum(10, (poly[2]-poly[6]))))\n            x1 = poly[0] - np.cos(theta13)*margin\n            y1 = poly[1] - np.sin(theta13)*margin\n            x2 = poly[2] + np.cos(theta24)*margin\n            y2 = poly[3] - np.sin(theta24)*margin\n            x3 = poly[4] + np.cos(theta13)*margin\n            y3 = poly[5] + np.sin(theta13)*margin\n            x4 = poly[6] - np.cos(theta24)*margin\n            y4 = poly[7] + np.sin(theta24)*margin\n\n            free_list.append([[x1,y1],[x2,y2],[x3,y3],[x4,y4]])\n    if sort_output:\n        horizontal_list = sorted(horizontal_list, key=lambda item: item[4])\n\n    new_box = []\n    for poly in horizontal_list:\n\n        if len(new_box) == 0:\n            b_height = [poly[5]]\n            b_ycenter = [poly[4]]\n            new_box.append(poly)\n        else:\n            if abs(np.mean(b_ycenter) - poly[4]) < ycenter_ths*np.mean(b_height):\n                b_height.append(poly[5])\n                b_ycenter.append(poly[4])\n                new_box.append(poly)\n            else:\n                b_height = [poly[5]]\n                b_ycenter = [poly[4]]\n                combined_list.append(new_box)\n                new_box = [poly]\n    combined_list.append(new_box)\n\n    for boxes in combined_list:\n        if len(boxes) == 1:\n            box = boxes[0]\n            margin = int(add_margin*min(box[1]-box[0],box[5]))\n            merged_list.append([box[0]-margin,box[1]+margin,box[2]-margin,box[3]+margin])\n        else:\n            boxes = sorted(boxes, key=lambda item: item[0])\n\n            merged_box, new_box = [],[]\n            for box in boxes:\n                if len(new_box) == 0:\n                    b_height = [box[5]]\n                    x_max = box[1]\n                    new_box.append(box)\n                else:\n                    if (abs(np.mean(b_height) - box[5]) < height_ths*np.mean(b_height)) and ((box[0]-x_max) < width_ths *(box[3]-box[2])):\n                        b_height.append(box[5])\n                        x_max = box[1]\n                        new_box.append(box)\n                    else:\n                        b_height = [box[5]]\n                        x_max = box[1]\n                        merged_box.append(new_box)\n                        new_box = [box]\n            if len(new_box) >0: merged_box.append(new_box)\n\n            for mbox in merged_box:\n                if len(mbox) != 1:\n                    x_min = min(mbox, key=lambda x: x[0])[0]\n                    x_max = max(mbox, key=lambda x: x[1])[1]\n                    y_min = min(mbox, key=lambda x: x[2])[2]\n                    y_max = max(mbox, key=lambda x: x[3])[3]\n\n                    box_width = x_max - x_min\n                    box_height = y_max - y_min\n                    margin = int(add_margin * (min(box_width, box_height)))\n\n                    merged_list.append([x_min-margin, x_max+margin, y_min-margin, y_max+margin])\n                else:\n                    box = mbox[0]\n\n                    box_width = box[1] - box[0]\n                    box_height = box[3] - box[2]\n                    margin = int(add_margin * (min(box_width, box_height)))\n\n                    merged_list.append([box[0]-margin,box[1]+margin,box[2]-margin,box[3]+margin])\n    return merged_list, free_list",
  "input_contexts": [
    {
      "id": "JaidedAI_EasyOCR_290_2",
      "input_code": "def main(args):\n    \n    if args.output is None:\n        args.output = \"EasyOcrUnitTestPackage_{}.pickle\".format(datetime.now().strftime(\"%Y%m%dT%H%M\"))\n    \n    if args.data_dir is None:\n        data_dir = \"./examples\"\n    else:\n        data_dir = args.data_dir\n    \n    image_preprocess = {\n        'english.png':{\n            \"tiny\": [540, 420, 690, 470],\n            \"mini\": [260, 90, 605, 160],\n            \"small\": [243, 234, 636, 360]\n            }, \n        'french.jpg':{\n            \"tiny\": [184, 615, 425, 732]\n            }, \n        'chinese.jpg':{\n            \"tiny\": [181, 78, 469, 157]\n            }, \n        'korean.png':{\n            \"tiny\": [130, 84, 285, 180]\n            }\n        }\n\n    \n    if any([file not in os.listdir(data_dir) for file in image_preprocess.keys()]):\n        raise FileNotFoundError(\"Cannot find {} in {}.\").format(', '.join([file for file in image_preprocess.keys() if file not in os.listdir(data_dir)], data_dir))\n    \n    easyocr_config = {\"main_language\": 'en'}\n    \n    ocr = get_easyocr(easyocr_config[\"main_language\"])\n    \n    images = {os.path.splitext(file)[0]: {\n                    key: np.asarray(PIL.Image.open(os.path.join(data_dir, file)).crop(crop_box))[:,:,::-1] for (key,crop_box) in page.items() \n                    } for (file,page) in image_preprocess.items()}\n\n    \n    english_mini_bgr, english_mini_gray = easyocr.utils.reformat_input(images['english']['mini'])\n    english_small_bgr, english_small_gray = easyocr.utils.reformat_input(images['english']['small'])\n    \n    \n    model_init_test = {'test01': {\n                            'description': \"Counting parameters of detector module.\",\n                            \"method\": \"unit_test.count_parameters\",\n                            'input': [\"unit_test.easyocr.ocr.detector\"],\n                            'output': count_parameters(ocr.detector),    \n                            'severity': \"Error\"\n                            },\n                      'test02': {\n                            'description': \"Calculating total norm of parameters in detector module.\",\n                            \"method\": \"unit_test.get_weight_norm\",\n                            'input': [\"unit_test.easyocr.ocr.detector\"],\n                            'output': get_weight_norm(ocr.detector),    \n                            'severity': \"Warning\"\n                            },\n                      'test03': {\n                            'description': \"Counting parameters of recognition module.\",\n                            \"method\": \"unit_test.count_parameters\",\n                            'input': [\"unit_test.easyocr.ocr.recognizer\"],\n                            'output': count_parameters(ocr.recognizer),    \n                            'severity': \"Error\"\n                            },\n                      'test04': {\n                            'description': \"Calculating total norm of parameters in recognition module.\",\n                            \"method\": \"unit_test.get_weight_norm\",\n                            'input': [\"unit_test.easyocr.ocr.recognizer\"],\n                            'output': get_weight_norm(ocr.recognizer),    \n                            'severity': \"Warning\"\n                            },\n                      }\n    \n    \n    get_textbox_test = {}\n    \n    input0 = [ocr.detector,              english_mini_bgr,              2560,              1.0,              0.7,              0.4,              0.4,              False,              'cuda',              ]\n    get_textbox_test.update({'test01': {\n                                'description': \"Testing with default input.\",\n                                \"method\": \"unit_test.easyocr.detection.get_textbox\",\n                                'input': replace(input0, \n                                                 [0, 1], \n                                                 [\"unit_test.easyocr.ocr.detector\",\n                                                  \"unit_test.inputs.images.english.mini_bgr\"\n                                                   ]),\n                                'output': easyocr.detection.get_textbox(*input0),    \n                                'severity': \"Error\"\n                                }})\n    \n    input0 = [ocr.detector,              english_mini_bgr,              1280,              1.2,              0.6,              0.3,              0.3,              False,              'cuda',              ]\n    \n    get_textbox_test.update({'test02': {\n                            'description': \"Testing with custom input.\",\n                            \"method\": \"unit_test.easyocr.detection.get_textbox\",\n                            'input': replace(input0, \n                                             [0, 1], \n                                             [\"unit_test.easyocr.ocr.detector\",\n                                              \"unit_test.inputs.images.english.mini_bgr\"\n                                               ]),\n                            'output': easyocr.detection.get_textbox(*input0),\n                            'severity': \"Error\"\n                            }})\n    \n    input0 = [ocr.detector,              english_mini_bgr,              640,              0.8,              0.8,              0.5,              0.5,              False,              'cuda',              ]\n    \n    get_textbox_test.update({'test03': {\n                            'description': \"Testing with custom input.\",\n                            \"method\": \"unit_test.easyocr.detection.get_textbox\",\n                            'input': replace(input0, \n                                             [0, 1], \n                                             [\"unit_test.easyocr.ocr.detector\",\n                                              \"unit_test.inputs.images.english.mini_bgr\"\n                                               ]),\n                            'output': easyocr.detection.get_textbox(*input0),\n                            'severity': \"Error\"\n                            }})\n    \n\n    input0 = [ocr.detector,              english_mini_bgr,              2560,              1.0,              0.7,              0.4,              0.4,              False,              'cuda',              ]\n    output0 = easyocr.detection.get_textbox(*input0)\n    polys = output0[0]\n    group_text_box_test = {}\n    \n    input_ = [polys, \n              0.1,              0.5,              0.5,              1.0,              0.05,              True              ]\n    group_text_box_test.update({'test01': {\n                                'description': \"Testing with default input.\",\n                                \"method\": \"unit_test.easyocr.utils.group_text_box\",\n                                'input': input_,\n                                'output': easyocr.utils.group_text_box(*input_),    \n                                'severity': \"Error\"\n                                }\n                            })\n    input_ = [polys, \n              0.05,              0.3,              0.3,              0.8,              0.03,              True              ]\n    group_text_box_test.update({'test02': {\n                                'description': \"Testing with custom input.\",\n                                \"method\": \"unit_test.easyocr.utils.group_text_box\",\n                                'input': input_,\n                                'output': easyocr.utils.group_text_box(*input_),    \n                                'severity': \"Error\"\n                                }\n                            })\n    input_ = [polys, \n              0.12,              0.7,              0.7,              1.2,              0.1,              True              ]\n    group_text_box_test.update({'test03': {\n                                'description': \"Testing with custom input.\",\n                                \"method\": \"unit_test.easyocr.utils.group_text_box\",\n                                'input': input_,\n                                'output': easyocr.utils.group_text_box(*input_),    \n                                'severity': \"Error\"\n                                }\n                            })\n    \n    input0 = [None, \n              20,              0.7,              0.4,              0.4,              2560,              1.,              0.1,              0.5,              0.5,              0.5,              0.1,              True,              None              ]\n    \n    detect_test = {}\n\n    input_ = replace(input0, [0,1], [english_mini_bgr, 20])\n    detect_test.update({'test01': {\n                        'description': \"Testing with default input.\",\n                        \"method\": \"unit_test.easyocr.ocr.detect\",\n                        'input': replace(input_, 0, \"unit_test.inputs.images.english.mini_bgr\"),\n                        'output': ocr.detect(*input_),    \n                        'severity': \"Error\"\n                        },\n                    })\n    input_ = replace(input0, [0,1], [english_small_bgr, 20])\n    detect_test.update({'test02': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.ocr.detect\",\n                        'input': replace(input_, 0, \"unit_test.inputs.images.english.small_bgr\"),\n                        'output': ocr.detect(*input_),    \n                        'severity': \"Error\"\n                        },\n                    })\n    input_ = replace(input0, [0,1], [english_small_bgr, 100])\n    detect_test.update({'test03': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.ocr.detect\",\n                        'input': replace(input_, 0, \"unit_test.inputs.images.english.small_bgr\"),\n                        'output': ocr.detect(*input_),    \n                        'severity': \"Error\"\n                        },\n                    })\n    \n    get_image_list_test = {}\n    output0 = ocr.detect(english_small_bgr)\n    input0 = [output0[0][0], \n              output0[1][0], \n              english_small_gray, \n              64,              True              ]\n    input_ = replace(input0, 2, \"unit_test.inputs.images.english.small_gray\")\n    get_image_list_test.update({'test01': {\n                        'description': \"Testing with default input.\",\n                        \"method\": \"unit_test.easyocr.utils.get_image_list\",\n                        'input': input_,\n                        'output': easyocr.utils.get_image_list(*input0),    \n                        'severity': \"Error\"\n                        },\n                    })\n    \n    output0 = ocr.detect(english_mini_bgr)\n    input0 = [output0[0][0], \n              output0[1][0], \n              english_mini_gray, \n              64,              True              ]\n    input_ = replace(input0, 2, \"unit_test.inputs.images.english.mini_gray\")\n    get_image_list_test.update({'test02': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.utils.get_image_list\",\n                        'input': input_,\n                        'output': easyocr.utils.get_image_list(*input0),    \n                        'severity': \"Error\"\n                        },\n                    })\n    \n    output0 = ocr.detect(english_mini_bgr)\n    input0 = [output0[0][0], \n              output0[1][0], \n              english_mini_gray, \n              64,              True              ]\n    image_list, max_width = easyocr.utils.get_image_list(*input0)\n    \n    input0 = [ocr.character, \n              64,              int(max_width), \n              ocr.recognizer, \n              ocr.converter, \n              image_list[:2],\n              '',              'greedy',              5,              1,              0.1,              0.5,              0.003,              1,              \"cuda\"              ]\n    \n    get_text_test = {}\n        \n    output_ = easyocr.recognition.get_text(*input0)   \n    input_ = replace(input0, \n                     [0, 3, 4], \n                     [\"unit_test.easyocr.ocr.character\", \n                      \"unit_test.easyocr.ocr.recognizer\", \n                      \"unit_test.easyocr.ocr.converter\"]\n                     )\n\n    get_text_test.update({'test01': {\n                        'description': \"Testing with default input.\",\n                        \"method\": \"unit_test.easyocr.recognition.get_text\",\n                        'input': input_,\n                        'output': output_,    \n                        'severity': \"Error\"\n                        },\n                    })\n    \n    input0 = [ocr.character, \n              64,              int(max_width), \n              ocr.recognizer, \n              ocr.converter, \n              image_list[:2],\n              '',              'greedy',              4,              1,              0.05,              0.3,              0.001,              1,              \"cuda\"              ]\n    \n    output_ = easyocr.recognition.get_text(*input0)   \n    input_ = replace(input0, \n                     [0, 3, 4], \n                     [\"unit_test.easyocr.ocr.character\", \n                      \"unit_test.easyocr.ocr.recognizer\", \n                      \"unit_test.easyocr.ocr.converter\"]\n                     )\n    get_text_test.update({'test02': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.recognition.get_text\",\n                        'input': input_,\n                        'output': output_,    \n                        'severity': \"Error\"\n                        }})\n    \n    input0 = [ocr.character, \n              64,              int(max_width), \n              ocr.recognizer, \n              ocr.converter, \n              image_list[:2],\\\n              '',              'greedy',              6,              4,              0.2,              0.6,              0.005,              1,              \"cuda\"              ]\n    \n    output_ = easyocr.recognition.get_text(*input0)   \n    input_ = replace(input0, \n                     [0, 3, 4], \n                     [\"unit_test.easyocr.ocr.character\", \n                      \"unit_test.easyocr.ocr.recognizer\", \n                      \"unit_test.easyocr.ocr.converter\"]\n                     )\n    get_text_test.update({'test03': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.recognition.get_text\",\n                        'input': input_,\n                        'output': output_,    \n                        'severity': \"Error\"\n                        }})\n    \n    \n    get_paragraph_test = {}\n    output0 = ocr.detect(english_mini_bgr)\n    input0 = [output0[0][0], \n              output0[1][0], \n              english_mini_gray, \n              64,              True              ]\n    image_list, max_width = easyocr.utils.get_image_list(*input0)\n    \n    input0 = [ocr.character, \n              64,              int(max_width), \n              ocr.recognizer, \n              ocr.converter, \n              image_list[:2],\n              '',              'greedy',              5,              1,              0.1,              0.5,              0.003,              1,              \"cuda\"              ]\n    \n    output0 = easyocr.recognition.get_text(*input0)   \n    input_ = [output0, \n              1,              0.5,              'ltr'              ]\n    get_paragraph_test.update({'test01': {\n                        'description': \"Testing with default input.\",\n                        \"method\": \"unit_test.easyocr.utils.get_paragraph\",\n                        'input': input_,\n                        'output': easyocr.utils.get_paragraph(*input_),    \n                        'severity': \"Error\"\n                        }})\n    input_ = [output0, \n              0.5,              0.3,              'ltr'              ]\n    get_paragraph_test.update({'test02': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.utils.get_paragraph\",\n                        'input': input_,\n                        'output': easyocr.utils.get_paragraph(*input_),    \n                        'severity': \"Error\"\n                        }})\n    input_ = [output0, \n              1.5,              1,              'ltr'              ]\n    get_paragraph_test.update({'test03': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.utils.get_paragraph\",\n                        'input': input_,\n                        'output': easyocr.utils.get_paragraph(*input_),    \n                        'severity': \"Error\"\n                        }})\n    \n    \n    input_recog = [None, \n              None,              None,              'greedy',              5,              1,              0,              None,              None,              1,              None,              False,              0.1,              0.5,              0.003,              0.5,              1.0,              True,              'standard'              ]\n    \n    recognize_test = {}\n    \n    h_list, f_list = ocr.detect(english_mini_bgr)\n    input_ = replace(input_recog, \n                     [0, 1, 2], \n                     [english_mini_gray, h_list[0], f_list[0]])\n    recognize_test.update({'test01': {\n                        'description': \"Testing with default input.\",\n                        \"method\": \"unit_test.easyocr.ocr.recognize\",\n                        'input': replace(input_, 0, \"unit_test.inputs.images.english.mini_gray\"),\n                        'output': ocr.recognize(*input_),    \n                        'severity': \"Error\"\n                        }})\n    \n    h_list, f_list = ocr.detect(english_small_bgr)\n    input_ = replace(input_recog, \n                     [0, 1, 2], \n                     [english_small_gray, h_list[0], f_list[0]])\n    recognize_test.update({'test02': {\n                        'description': \"Testing with custom input.\",\n                        \"method\": \"unit_test.easyocr.ocr.recognize\",\n                        'input': replace(input_, 0, \"unit_test.inputs.images.english.small_gray\"),\n                        'output': ocr.recognize(*input_),    \n                        'severity': \"Error\"\n                        }})\n\n    readtext_test = {}\n    input_ = [\"unit_test.inputs.images.english.tiny\", 'en']\n    ocr = get_easyocr('en')\n    _, pred, confidence = ocr.readtext(images['english']['tiny'])[0]\n    output_ = [pred, confidence]\n    readtext_test.update({'test01': {\n                        'description': \"Reading English text.\",\n                        \"method\": \"unit_test.easyocr_read_as\",\n                        'input': input_,\n                        'output': output_,    \n                        'severity': \"Error\"\n                        }})\n    input_ = [\"unit_test.inputs.images.french.tiny\", 'fr']\n    ocr = get_easyocr('fr')\n    _, pred, confidence = ocr.readtext(images['french']['tiny'])[0]\n    output_ = [pred, confidence]\n    readtext_test.update({'test02': {\n                        'description': \"Reading French text.\",\n                        \"method\": \"unit_test.easyocr_read_as\",\n                        'input': input_,\n                        'output': output_,    \n                        'severity': \"Error\"\n                        }})\n    input_ = [\"unit_test.inputs.images.chinese.tiny\", 'ch_sim']\n    ocr = get_easyocr('ch_sim')\n    _, pred, confidence = ocr.readtext(images['chinese']['tiny'])[0]\n    output_ = [pred, confidence]\n    readtext_test.update({'test03': {\n                        'description': \"Reading Chinese (simplified) text.\",\n                        \"method\": \"unit_test.easyocr_read_as\",\n                        'input': input_,\n                        'output': output_,    \n                        'severity': \"Error\"\n                        }})\n    input_ = [\"unit_test.inputs.images.korean.tiny\", 'ko']\n    ocr = get_easyocr('ko')\n    _, pred, confidence = ocr.readtext(images['korean']['tiny'])[0]\n    output_ = [pred, confidence]\n    readtext_test.update({'test04': {\n                        'description': \"Reading Korean text.\",\n                        \"method\": \"unit_test.easyocr_read_as\",\n                        'input': input_,\n                        'output': output_,    \n                        'severity': \"Error\"\n                        }})\n    \n    \n    \n    solution_book = {\n            'inputs':{'images': image_preprocess,\n                      'easyocr_config': easyocr_config\n                      },\n            'tests':{\n                 \"model initialization\": model_init_test,\n                 \"get_textbox function\": get_textbox_test,\n                 \"group_text_box function\": group_text_box_test,\n                 \"detect method\": detect_test,\n                 \"get_image_list function\": get_image_list_test,\n                 \"get_text_test function\": get_text_test,\n                 \"get_paragraph_test function\": get_paragraph_test,\n                 \"recognize method\": recognize_test,\n                 \"readtext method\": readtext_test,\n                 }\n            }\n            \n    \n    \n    with lzma.open(args.output, 'wb') as fid:\n        pickle.dump(solution_book, fid)\n"
    },
    {
      "id": "JaidedAI_EasyOCR_290_1",
      "input_code": "    def detect(self, img, min_size = 20, text_threshold = 0.7, low_text = 0.4,\\\n               link_threshold = 0.4,canvas_size = 2560, mag_ratio = 1.,\\\n               slope_ths = 0.1, ycenter_ths = 0.5, height_ths = 0.5,\\\n               width_ths = 0.5, add_margin = 0.1, reformat=True, optimal_num_chars=None,\n               threshold = 0.2, bbox_min_score = 0.2, bbox_min_size = 3, max_candidates = 0,\n               ):\n\n        if reformat:\n            img, img_cv_grey = reformat_input(img)\n\n        text_box_list = self.get_textbox(self.detector, \n                                    img, \n                                    canvas_size = canvas_size, \n                                    mag_ratio = mag_ratio,\n                                    text_threshold = text_threshold, \n                                    link_threshold = link_threshold, \n                                    low_text = low_text,\n                                    poly = False, \n                                    device = self.device, \n                                    optimal_num_chars = optimal_num_chars,\n                                    threshold = threshold, \n                                    bbox_min_score = bbox_min_score, \n                                    bbox_min_size = bbox_min_size, \n                                    max_candidates = max_candidates,\n                                    )\n\n        horizontal_list_agg, free_list_agg = [], []\n        for text_box in text_box_list:\n            horizontal_list, free_list = group_text_box(text_box, slope_ths,\n                                                        ycenter_ths, height_ths,\n                                                        width_ths, add_margin,\n                                                        (optimal_num_chars is None))\n            if min_size:\n                horizontal_list = [i for i in horizontal_list if max(\n                    i[1] - i[0], i[3] - i[2]) > min_size]\n                free_list = [i for i in free_list if max(\n                    diff([c[0] for c in i]), diff([c[1] for c in i])) > min_size]\n            horizontal_list_agg.append(horizontal_list)\n            free_list_agg.append(free_list)\n\n        return horizontal_list_agg, free_list_agg\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport numpy as np\n\n<testcase_1>\npolys = [\n    [10, 20, 30, 40, 50, 60, 70, 80],\n    [15, 25, 35, 45, 55, 65, 75, 85],\n    [20, 30, 40, 50, 60, 70, 80, 90]\n]\nslope_ths = 0.1\nycenter_ths = 0.5\nheight_ths = 0.5\nwidth_ths = 1.0\nadd_margin = 0.05\nsort_output = True\n\n<testcase_2>\npolys = [\n    [100, 200, 300, 400, 500, 600, 700, 800],\n    [110, 210, 310, 410, 510, 610, 710, 810],\n    [120, 220, 320, 420, 520, 620, 720, 820]\n]\nslope_ths = 0.2\nycenter_ths = 0.6\nheight_ths = 0.4\nwidth_ths = 1.2\nadd_margin = 0.1\nsort_output = False\n\n<testcase_3>\npolys = [\n    [50, 60, 70, 80, 90, 100, 110, 120],\n    [55, 65, 75, 85, 95, 105, 115, 125],\n    [60, 70, 80, 90, 100, 110, 120, 130]\n]\nslope_ths = 0.05\nycenter_ths = 0.4\nheight_ths = 0.6\nwidth_ths = 0.8\nadd_margin = 0.02\nsort_output = True\n\n<testcase_4>\npolys = [\n    [200, 300, 400, 500, 600, 700, 800, 900],\n    [210, 310, 410, 510, 610, 710, 810, 910],\n    [220, 320, 420, 520, 620, 720, 820, 920]\n]\nslope_ths = 0.15\nycenter_ths = 0.55\nheight_ths = 0.45\nwidth_ths = 1.1\nadd_margin = 0.07\nsort_output = False\n\n<testcase_5>\npolys = [\n    [30, 40, 50, 60, 70, 80, 90, 100],\n    [35, 45, 55, 65, 75, 85, 95, 105],\n    [40, 50, 60, 70, 80, 90, 100, 110]\n]\nslope_ths = 0.08\nycenter_ths = 0.5\nheight_ths = 0.5\nwidth_ths = 1.0\nadd_margin = 0.05\nsort_output = True"
  ],
  "gpt_output": "<needimport>\nimport numpy as np\n\n<testcase_1>\npolys = [\n    [10, 20, 30, 40, 50, 60, 70, 80],\n    [15, 25, 35, 45, 55, 65, 75, 85],\n    [20, 30, 40, 50, 60, 70, 80, 90]\n]\nslope_ths = 0.1\nycenter_ths = 0.5\nheight_ths = 0.5\nwidth_ths = 1.0\nadd_margin = 0.05\nsort_output = True\n\n<testcase_2>\npolys = [\n    [100, 200, 300, 400, 500, 600, 700, 800],\n    [110, 210, 310, 410, 510, 610, 710, 810],\n    [120, 220, 320, 420, 520, 620, 720, 820]\n]\nslope_ths = 0.2\nycenter_ths = 0.6\nheight_ths = 0.4\nwidth_ths = 1.2\nadd_margin = 0.1\nsort_output = False\n\n<testcase_3>\npolys = [\n    [50, 60, 70, 80, 90, 100, 110, 120],\n    [55, 65, 75, 85, 95, 105, 115, 125],\n    [60, 70, 80, 90, 100, 110, 120, 130]\n]\nslope_ths = 0.05\nycenter_ths = 0.4\nheight_ths = 0.6\nwidth_ths = 0.8\nadd_margin = 0.02\nsort_output = True\n\n<testcase_4>\npolys = [\n    [200, 300, 400, 500, 600, 700, 800, 900],\n    [210, 310, 410, 510, 610, 710, 810, 910],\n    [220, 320, 420, 520, 620, 720, 820, 920]\n]\nslope_ths = 0.15\nycenter_ths = 0.55\nheight_ths = 0.45\nwidth_ths = 1.1\nadd_margin = 0.07\nsort_output = False\n\n<testcase_5>\npolys = [\n    [30, 40, 50, 60, 70, 80, 90, 100],\n    [35, 45, 55, 65, 75, 85, 95, 105],\n    [40, 50, 60, 70, 80, 90, 100, 110]\n]\nslope_ths = 0.08\nycenter_ths = 0.5\nheight_ths = 0.5\nwidth_ths = 1.0\nadd_margin = 0.05\nsort_output = True",
  "needimport": "import numpy as np\n\n",
  "test_results": {
    "ans1": [
      [],
      [
        [
          [
            9.514928749927334,
            18.059714999709335
          ],
          [
            30.485071250072664,
            38.059714999709335
          ],
          [
            50.485071250072664,
            61.940285000290665
          ],
          [
            69.51492874992734,
            81.94028500029066
          ]
        ],
        [
          [
            14.514928749927334,
            23.059714999709335
          ],
          [
            35.485071250072664,
            43.059714999709335
          ],
          [
            55.485071250072664,
            66.94028500029066
          ],
          [
            74.51492874992734,
            86.94028500029066
          ]
        ],
        [
          [
            19.514928749927336,
            28.059714999709335
          ],
          [
            40.485071250072664,
            48.059714999709335
          ],
          [
            60.485071250072664,
            71.94028500029066
          ],
          [
            79.51492874992734,
            91.94028500029066
          ]
        ]
      ]
    ],
    "ans2": [
      [],
      [
        [
          [
            99.00031235359188,
            160.0124941436751
          ],
          [
            300.9996876464081,
            360.0124941436751
          ],
          [
            500.9996876464081,
            639.9875058563249
          ],
          [
            699.0003123535919,
            839.9875058563249
          ]
        ],
        [
          [
            109.00031235359188,
            170.0124941436751
          ],
          [
            310.9996876464081,
            370.0124941436751
          ],
          [
            510.9996876464081,
            649.9875058563249
          ],
          [
            709.0003123535919,
            849.9875058563249
          ]
        ],
        [
          [
            119.00031235359188,
            180.0124941436751
          ],
          [
            320.9996876464081,
            380.0124941436751
          ],
          [
            520.9996876464081,
            659.9875058563249
          ],
          [
            719.0003123535919,
            859.9875058563249
          ]
        ]
      ]
    ],
    "ans3": [
      [],
      [
        [
          [
            50.0,
            60.0
          ],
          [
            70.0,
            80.0
          ],
          [
            90.0,
            100.0
          ],
          [
            110.0,
            120.0
          ]
        ],
        [
          [
            55.0,
            65.0
          ],
          [
            75.0,
            85.0
          ],
          [
            95.0,
            105.0
          ],
          [
            115.0,
            125.0
          ]
        ],
        [
          [
            60.0,
            70.0
          ],
          [
            80.0,
            90.0
          ],
          [
            100.0,
            110.0
          ],
          [
            120.0,
            130.0
          ]
        ]
      ]
    ],
    "ans4": [
      [],
      [
        [
          [
            199.30021864751433,
            272.00874590057253
          ],
          [
            400.6997813524857,
            472.00874590057253
          ],
          [
            600.6997813524857,
            727.9912540994275
          ],
          [
            799.3002186475143,
            927.9912540994275
          ]
        ],
        [
          [
            209.30021864751433,
            282.00874590057253
          ],
          [
            410.6997813524857,
            482.00874590057253
          ],
          [
            610.6997813524857,
            737.9912540994275
          ],
          [
            809.3002186475143,
            937.9912540994275
          ]
        ],
        [
          [
            219.30021864751433,
            292.00874590057253
          ],
          [
            420.6997813524857,
            492.00874590057253
          ],
          [
            620.6997813524857,
            747.9912540994275
          ],
          [
            819.3002186475143,
            947.9912540994275
          ]
        ]
      ]
    ],
    "ans5": [
      [],
      [
        [
          [
            29.514928749927336,
            38.059714999709335
          ],
          [
            50.485071250072664,
            58.059714999709335
          ],
          [
            70.48507125007266,
            81.94028500029066
          ],
          [
            89.51492874992734,
            101.94028500029066
          ]
        ],
        [
          [
            34.514928749927336,
            43.059714999709335
          ],
          [
            55.485071250072664,
            63.059714999709335
          ],
          [
            75.48507125007266,
            86.94028500029066
          ],
          [
            94.51492874992734,
            106.94028500029066
          ]
        ],
        [
          [
            39.514928749927336,
            48.059714999709335
          ],
          [
            60.485071250072664,
            68.05971499970934
          ],
          [
            80.48507125007266,
            91.94028500029066
          ],
          [
            99.51492874992734,
            111.94028500029066
          ]
        ]
      ]
    ]
  }
}