{
  "input_header": "def conv3x3(in_channels, out_channels, stride=1):",
  "input_docstring": null,
  "output_code": "def conv3x3(in_channels, out_channels, stride=1):\n    return nn.Conv2d(in_channels, out_channels, kernel_size=3, \n                     stride=stride, padding=1, bias=False)",
  "input_contexts": [
    {
      "id": "yunjey_pytorch-tutorial_9_2",
      "input_code": "    def __init__(self, block, layers, num_classes=10):\n        super(ResNet, self).__init__()\n        self.in_channels = 16\n        self.conv = conv3x3(3, 16)\n        self.bn = nn.BatchNorm2d(16)\n        self.relu = nn.ReLU(inplace=True)\n        self.layer1 = self.make_layer(block, 16, layers[0])\n        self.layer2 = self.make_layer(block, 32, layers[1], 2)\n        self.layer3 = self.make_layer(block, 64, layers[2], 2)\n        self.avg_pool = nn.AvgPool2d(8)\n        self.fc = nn.Linear(64, num_classes)\n"
    },
    {
      "id": "yunjey_pytorch-tutorial_9_3",
      "input_code": "    def make_layer(self, block, out_channels, blocks, stride=1):\n        downsample = None\n        if (stride != 1) or (self.in_channels != out_channels):\n            downsample = nn.Sequential(\n                conv3x3(self.in_channels, out_channels, stride=stride),\n                nn.BatchNorm2d(out_channels))\n        layers = []\n        layers.append(block(self.in_channels, out_channels, stride, downsample))\n        self.in_channels = out_channels\n        for i in range(1, blocks):\n            layers.append(block(out_channels, out_channels))\n        return nn.Sequential(*layers)\n"
    },
    {
      "id": "yunjey_pytorch-tutorial_9_1",
      "input_code": "    def __init__(self, in_channels, out_channels, stride=1, downsample=None):\n        super(ResidualBlock, self).__init__()\n        self.conv1 = conv3x3(in_channels, out_channels, stride)\n        self.bn1 = nn.BatchNorm2d(out_channels)\n        self.relu = nn.ReLU(inplace=True)\n        self.conv2 = conv3x3(out_channels, out_channels)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n        self.downsample = downsample\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport torch.nn as nn\n\n<testcase_1>\nin_channels = 3\nout_channels = 16\nstride = 1\n\n<testcase_2>\nin_channels = 64\nout_channels = 128\nstride = 2\n\n<testcase_3>\nin_channels = 32\nout_channels = 64\nstride = 1\n\n<testcase_4>\nin_channels = 1\nout_channels = 8\nstride = 1\n\n<testcase_5>\nin_channels = 128\nout_channels = 256\nstride = 2"
  ],
  "gpt_output": "<needimport>\nimport torch.nn as nn\n\n<testcase_1>\nin_channels = 3\nout_channels = 16\nstride = 1\n\n<testcase_2>\nin_channels = 64\nout_channels = 128\nstride = 2\n\n<testcase_3>\nin_channels = 32\nout_channels = 64\nstride = 1\n\n<testcase_4>\nin_channels = 1\nout_channels = 8\nstride = 1\n\n<testcase_5>\nin_channels = 128\nout_channels = 256\nstride = 2",
  "needimport": "import torch.nn as nn\n\n",
  "test_results": {
    "ans1": {
      "in_channels": 3,
      "out_channels": 16,
      "kernel_size": [
        3,
        3
      ],
      "stride": [
        1,
        1
      ],
      "padding": [
        1,
        1
      ],
      "dilation": [
        1,
        1
      ],
      "groups": 1,
      "bias": false,
      "padding_mode": "zeros"
    },
    "ans2": {
      "in_channels": 64,
      "out_channels": 128,
      "kernel_size": [
        3,
        3
      ],
      "stride": [
        2,
        2
      ],
      "padding": [
        1,
        1
      ],
      "dilation": [
        1,
        1
      ],
      "groups": 1,
      "bias": false,
      "padding_mode": "zeros"
    },
    "ans3": {
      "in_channels": 32,
      "out_channels": 64,
      "kernel_size": [
        3,
        3
      ],
      "stride": [
        1,
        1
      ],
      "padding": [
        1,
        1
      ],
      "dilation": [
        1,
        1
      ],
      "groups": 1,
      "bias": false,
      "padding_mode": "zeros"
    },
    "ans4": {
      "in_channels": 1,
      "out_channels": 8,
      "kernel_size": [
        3,
        3
      ],
      "stride": [
        1,
        1
      ],
      "padding": [
        1,
        1
      ],
      "dilation": [
        1,
        1
      ],
      "groups": 1,
      "bias": false,
      "padding_mode": "zeros"
    },
    "ans5": {
      "in_channels": 128,
      "out_channels": 256,
      "kernel_size": [
        3,
        3
      ],
      "stride": [
        2,
        2
      ],
      "padding": [
        1,
        1
      ],
      "dilation": [
        1,
        1
      ],
      "groups": 1,
      "bias": false,
      "padding_mode": "zeros"
    }
  }
}