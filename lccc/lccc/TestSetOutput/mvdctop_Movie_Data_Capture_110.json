{
  "input_header": "def cc_convert_mode(self) -> int:",
  "input_docstring": null,
  "output_code": "    def cc_convert_mode(self) -> int:\n        v = self.conf.getint(\"cc_convert\", \"mode\", fallback=1)\n        return v if v in (0, 1, 2) else 2 if v > 2 else 0",
  "input_contexts": [
    {
      "id": "mvdctop_Movie_Data_Capture_110_2",
      "input_code": "def get_data_from_json(\n        file_number: str,\n        open_cc: opencc.OpenCC,\n        specified_source: str, specified_url: str) -> typing.Optional[dict]:\n    \n    try:\n        actor_mapping_data = etree.parse(str(Path.home() / '.local' / 'share' / 'mdc' / 'mapping_actor.xml'))\n        info_mapping_data = etree.parse(str(Path.home() / '.local' / 'share' / 'mdc' / 'mapping_info.xml'))\n    except:\n        actor_mapping_data = etree.fromstring(\"<html></html>\", etree.HTMLParser())\n        info_mapping_data = etree.fromstring(\"<html></html>\", etree.HTMLParser())\n\n    conf = config.getInstance()\n    sources = conf.sources()\n\n    proxies: dict = None\n    config_proxy = conf.proxy()\n    if config_proxy.enable:\n        proxies = config_proxy.proxies()\n\n    ca_cert = None\n    if conf.cacert_file():\n        ca_cert = conf.cacert_file()\n\n    json_data = search(file_number, sources, proxies=proxies, verify=ca_cert,\n                        morestoryline=conf.is_storyline(),\n                        specifiedSource=specified_source, specifiedUrl=specified_url,\n                        debug = conf.debug())\n    if not json_data:\n        print('[-]Movie Number not found!')\n        return None\n\n    if str(json_data.get('number')).upper() != file_number.upper():\n        try:\n            if json_data.get('allow_number_change'):\n                pass\n        except:\n            print('[-]Movie number has changed! [{}]->[{}]'.format(file_number, str(json_data.get('number'))))\n            return None\n\n\n    if json_data.get('title') == '':\n        print('[-]Movie Number or Title not found!')\n        return None\n\n    title = json_data.get('title')\n    actor_list = str(json_data.get('actor')).strip(\"[ ]\").replace(\"'\", '').split(',')\n    actor_list = [actor.strip() for actor in actor_list]\n    director = json_data.get('director')\n    release = json_data.get('release')\n    number = json_data.get('number')\n    studio = json_data.get('studio')\n    source = json_data.get('source')\n    runtime = json_data.get('runtime')\n    outline = json_data.get('outline')\n    label = json_data.get('label')\n    series = json_data.get('series')\n    year = json_data.get('year')\n\n    if json_data.get('cover_small'):\n        cover_small = json_data.get('cover_small')\n    else:\n        cover_small = ''\n\n    if json_data.get('trailer'):\n        trailer = json_data.get('trailer')\n    else:\n        trailer = ''\n\n    if json_data.get('extrafanart'):\n        extrafanart = json_data.get('extrafanart')\n    else:\n        extrafanart = ''\n\n    imagecut = json_data.get('imagecut')\n    tag = str(json_data.get('tag')).strip(\"[ ]\").replace(\"'\", '').replace(\" \", '').split(',')\n    while 'XXXX' in tag:\n        tag.remove('XXXX')\n    while 'xxx' in tag:\n        tag.remove('xxx')\n    actor = str(actor_list).strip(\"[ ]\").replace(\"'\", '').replace(\" \", '')\n\n\n    actor = special_characters_replacement(actor)\n    actor_list = [special_characters_replacement(a) for a in actor_list]\n    title = special_characters_replacement(title)\n    label = special_characters_replacement(label)\n    outline = special_characters_replacement(outline)\n    series = special_characters_replacement(series)\n    studio = special_characters_replacement(studio)\n    director = special_characters_replacement(director)\n    tag = [special_characters_replacement(t) for t in tag]\n    release = release.replace('/', '-')\n    tmpArr = cover_small.split(',')\n    if len(tmpArr) > 0:\n        cover_small = tmpArr[0].strip('\\\"').strip('\\'')\n\n    if conf.number_uppercase():\n        json_data['number'] = number.upper()\n\n    json_data['title'] = title\n    json_data['original_title'] = title\n    json_data['actor'] = actor\n    json_data['release'] = release\n    json_data['cover_small'] = cover_small\n    json_data['tag'] = tag\n    json_data['year'] = year\n    json_data['actor_list'] = actor_list\n    json_data['trailer'] = trailer\n    json_data['extrafanart'] = extrafanart\n    json_data['label'] = label\n    json_data['outline'] = outline\n    json_data['series'] = series\n    json_data['studio'] = studio\n    json_data['director'] = director\n\n    if conf.is_translate():\n        translate_values = conf.translate_values().split(\",\")\n        for translate_value in translate_values:\n            if json_data[translate_value] == \"\":\n                continue\n            if conf.get_translate_engine() == \"azure\":\n                t = translate(\n                    json_data[translate_value],\n                    target_language=\"zh-Hans\",\n                    engine=conf.get_translate_engine(),\n                    key=conf.get_translate_key(),\n                )\n            else:\n                if len(json_data[translate_value]):\n                    if type(json_data[translate_value]) == str:\n                        json_data[translate_value] = special_characters_replacement(json_data[translate_value])\n                        json_data[translate_value] = translate(json_data[translate_value])\n                    else:\n                        for i in range(len(json_data[translate_value])):\n                            json_data[translate_value][i] = special_characters_replacement(\n                                json_data[translate_value][i])\n                        list_in_str = \",\".join(json_data[translate_value])\n                        json_data[translate_value] = translate(list_in_str).split(',')\n\n    if open_cc:\n        cc_vars = conf.cc_convert_vars().split(\",\")\n        ccm = conf.cc_convert_mode()\n\n        def convert_list(mapping_data, language, vars):\n            total = []\n            for i in vars:\n                if len(mapping_data.xpath('a[contains(@keyword, $name)]/@' + language, name=f\",{i},\")) != 0:\n                    i = mapping_data.xpath('a[contains(@keyword, $name)]/@' + language, name=f\",{i},\")[0]\n                total.append(i)\n            return total\n\n        def convert(mapping_data, language, vars):\n            if len(mapping_data.xpath('a[contains(@keyword, $name)]/@' + language, name=vars)) != 0:\n                return mapping_data.xpath('a[contains(@keyword, $name)]/@' + language, name=vars)[0]\n            else:\n                raise IndexError('keyword not found')\n\n        for cc in cc_vars:\n            if json_data[cc] == \"\" or len(json_data[cc]) == 0:\n                continue\n            try:\n                if ccm == 1:\n                    json_data[cc] = convert(info_mapping_data, \"zh_cn\", json_data[cc])\n                    json_data[cc] = delete_all_elements_in_str(\"删除\", json_data[cc])\n                elif ccm == 2:\n                    json_data[cc] = convert(info_mapping_data, \"zh_tw\", json_data[cc])\n                    json_data[cc] = delete_all_elements_in_str(\"删除\", json_data[cc])\n                elif ccm == 3:\n                    json_data[cc] = convert(info_mapping_data, \"jp\", json_data[cc])\n                    json_data[cc] = delete_all_elements_in_str(\"删除\", json_data[cc])\n            except IndexError:\n                json_data[cc] = open_cc.convert(json_data[cc])\n            except:\n                pass\n\n    naming_rule = \"\"\n    original_naming_rule = \"\"\n    for i in conf.naming_rule().split(\"+\"):\n        if i not in json_data:\n            naming_rule += i.strip(\"'\").strip('\"')\n            original_naming_rule += i.strip(\"'\").strip('\"')\n        else:\n            item = json_data.get(i)\n            naming_rule += item if type(item) is not list else \"&\".join(item)\n            if i == 'title':\n                item = json_data.get('original_title')\n            original_naming_rule += item if type(item) is not list else \"&\".join(item)\n\n    json_data['naming_rule'] = naming_rule\n    json_data['original_naming_rule'] = original_naming_rule\n    return json_data\n"
    },
    {
      "id": "mvdctop_Movie_Data_Capture_110_1",
      "input_code": "def main(args: tuple) -> Path:\n    (single_file_path, custom_number, logdir, regexstr, zero_op, no_net_op, search, specified_source,\n     specified_url) = args\n    conf = config.getInstance()\n    main_mode = conf.main_mode()\n    folder_path = \"\"\n    if main_mode not in (1, 2, 3):\n        print(f\"[-]Main mode must be 1 or 2 or 3! You can run '{os.path.basename(sys.argv[0])} --help' for more help.\")\n        os._exit(4)\n\n    signal.signal(signal.SIGINT, signal_handler)\n    if sys.platform == 'win32':\n        signal.signal(signal.SIGBREAK, sigdebug_handler)\n    else:\n        signal.signal(signal.SIGWINCH, sigdebug_handler)\n    dupe_stdout_to_logfile(logdir)\n\n    platform_total = str(\n        ' - ' + platform.platform() + ' \\n[*] - ' + platform.machine() + ' - Python-' + platform.python_version())\n\n    print('[*]================= Movie Data Capture =================')\n    print('[*]' + version.center(54))\n    print('[*]======================================================')\n    print('[*]' + platform_total)\n    print('[*]======================================================')\n\n    start_time = time.time()\n    print('[+]Start at', time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n    print(f\"[+]Load Config file '{conf.ini_path}'.\")\n    if conf.debug():\n        print('[+]Enable debug')\n    if conf.link_mode() in (1, 2):\n        print('[!]Enable {} link'.format(('soft', 'hard')[conf.link_mode() - 1]))\n    if len(sys.argv) > 1:\n        print('[!]CmdLine:', \" \".join(sys.argv[1:]))\n    print('[+]Main Working mode ## {}: {} ## {}{}{}'\n          .format(*(main_mode, ['Scraping', 'Organizing', 'Scraping in analysis folder'][main_mode - 1],\n                    \"\" if not conf.multi_threading() else \", multi_threading on\",\n                    \"\" if conf.nfo_skip_days() == 0 else f\", nfo_skip_days={conf.nfo_skip_days()}\",\n                    \"\" if conf.stop_counter() == 0 else f\", stop_counter={conf.stop_counter()}\"\n                    ) if not single_file_path else ('-', 'Single File', '', '', ''))\n          )\n\n    create_failed_folder(conf.failed_folder())\n\n    ccm = conf.cc_convert_mode()\n    try:\n        oCC = None if ccm == 0 else OpenCC('t2s.json' if ccm == 1 else 's2t.json')\n    except:\n        oCC = None if ccm == 0 else OpenCC('t2s' if ccm == 1 else 's2t')\n\n    if not search == '':\n        search_list = search.split(\",\")\n        for i in search_list:\n            json_data = get_data_from_json(i, oCC, None, None)\n            debug_print(json_data)\n            time.sleep(int(config.getInstance().sleep()))\n        os._exit(0)\n\n    if not single_file_path == '':\n        print('[+]==================== Single File =====================')\n        if custom_number == '':\n            create_data_and_move_with_custom_number(single_file_path,\n                                                    get_number(conf.debug(), os.path.basename(single_file_path)), oCC,\n                                                    specified_source, specified_url)\n        else:\n            create_data_and_move_with_custom_number(single_file_path, custom_number, oCC,\n                                                    specified_source, specified_url)\n    else:\n        folder_path = conf.source_folder()\n        if not isinstance(folder_path, str) or folder_path == '':\n            folder_path = os.path.abspath(\".\")\n\n        movie_list = movie_lists(folder_path, regexstr)\n\n        count = 0\n        count_all = str(len(movie_list))\n        print('[+]Find', count_all, 'movies.')\n        print('[*]======================================================')\n        stop_count = conf.stop_counter()\n        if stop_count < 1:\n            stop_count = 999999\n        else:\n            count_all = str(min(len(movie_list), stop_count))\n\n        for movie_path in movie_list:\n            count = count + 1\n            percentage = str(count / int(count_all) * 100)[:4] + '%'\n            print('[!] {:>30}{:>21}'.format('- ' + percentage + ' [' + str(count) + '/' + count_all + '] -',\n                                            time.strftime(\"%H:%M:%S\")))\n            create_data_and_move(movie_path, zero_op, no_net_op, oCC)\n            if count >= stop_count:\n                print(\"[!]Stop counter triggered!\")\n                break\n            sleep_seconds = random.randint(conf.sleep(), conf.sleep() + 2)\n            time.sleep(sleep_seconds)\n\n    if conf.del_empty_folder() and not zero_op:\n        rm_empty_folder(conf.success_folder())\n        rm_empty_folder(conf.failed_folder())\n        if len(folder_path):\n            rm_empty_folder(folder_path)\n\n    end_time = time.time()\n    total_time = str(timedelta(seconds=end_time - start_time))\n    print(\"[+]Running time\", total_time[:len(total_time) if total_time.rfind('.') < 0 else -3],\n          \" End at\", time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\n    print(\"[+]All finished!!!\")\n\n    return close_logfile(logdir)\n"
    }
  ],
  "generated_inputs": [
    "<needimport>\nimport configparser\n\n<testcase_1>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '0'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_2>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '1'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_3>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '2'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_4>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '3'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_5>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '-1'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()"
  ],
  "gpt_output": "<needimport>\nimport configparser\n\n<testcase_1>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '0'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_2>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '1'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_3>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '2'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_4>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '3'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()\n\n<testcase_5>\nconf = configparser.ConfigParser()\nconf.read_dict({\n    'cc_convert': {\n        'mode': '-1'\n    }\n})\nclass Config:\n    def __init__(self, conf):\n        self.conf = conf\n    def getint(self, section, option, fallback):\n        return self.conf.getint(section, option, fallback=fallback)\nconfig_instance = Config(conf)\ncc_convert_mode_result = config_instance.cc_convert_mode()",
  "needimport": "import configparser\n\n",
  "test_results": {
    "ans1": 0,
    "ans2": 1,
    "ans3": 2,
    "ans4": 2,
    "ans5": 0
  }
}