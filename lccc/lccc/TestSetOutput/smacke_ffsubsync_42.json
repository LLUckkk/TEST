{
  "input_header": "def run( parser_or_args: Union[argparse.ArgumentParser, argparse.Namespace] ) -> Dict[str, Any]:",
  "input_docstring": null,
  "output_code": "def run(\n    parser_or_args: Union[argparse.ArgumentParser, argparse.Namespace]\n) -> Dict[str, Any]:\n    sync_was_successful = False\n    result = {\n        \"retval\": 0,\n        \"offset_seconds\": None,\n        \"framerate_scale_factor\": None,\n    }\n    args = validate_and_transform_args(parser_or_args)\n    if args is None:\n        result[\"retval\"] = 1\n        return result\n    log_path, log_handler = _setup_logging(args)\n    try:\n        sync_was_successful = _run_impl(args, result)\n        result[\"sync_was_successful\"] = sync_was_successful\n        return result\n    finally:\n        if log_handler is not None and log_path is not None:\n            log_handler.close()\n            logger.removeHandler(log_handler)\n            if args.make_test_case:\n                result[\"retval\"] += make_test_case(\n                    args, _npy_savename(args), sync_was_successful\n                )\n            if args.log_dir_path is None or not os.path.isdir(args.log_dir_path):\n                os.remove(log_path)",
  "input_contexts": [
    {
      "id": "smacke_ffsubsync_42_4",
      "input_code": "def get_cmdclass(cmdclass=None):\n    \n    if \"versioneer\" in sys.modules:\n        del sys.modules[\"versioneer\"]\n\n    cmds = {} if cmdclass is None else cmdclass.copy()\n\n    try:\n        from setuptools import Command\n    except ImportError:\n        from distutils.core import Command\n\n    class cmd_version(Command):\n        description = \"report generated version string\"\n        user_options = []\n        boolean_options = []\n\n        def initialize_options(self):\n            pass\n\n        def finalize_options(self):\n            pass\n\n        def run(self):\n            vers = get_versions(verbose=True)\n            print(\"Version: %s\" % vers[\"version\"])\n            print(\" full-revisionid: %s\" % vers.get(\"full-revisionid\"))\n            print(\" dirty: %s\" % vers.get(\"dirty\"))\n            print(\" date: %s\" % vers.get(\"date\"))\n            if vers[\"error\"]:\n                print(\" error: %s\" % vers[\"error\"])\n    cmds[\"version\"] = cmd_version\n\n\n    if 'build_py' in cmds:\n        _build_py = cmds['build_py']\n    elif \"setuptools\" in sys.modules:\n        from setuptools.command.build_py import build_py as _build_py\n    else:\n        from distutils.command.build_py import build_py as _build_py\n\n    class cmd_build_py(_build_py):\n        def run(self):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_py.run(self)\n            if cfg.versionfile_build:\n                target_versionfile = os.path.join(self.build_lib,\n                                                  cfg.versionfile_build)\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n    cmds[\"build_py\"] = cmd_build_py\n\n    if 'build_ext' in cmds:\n        _build_ext = cmds['build_ext']\n    elif \"setuptools\" in sys.modules:\n        from setuptools.command.build_ext import build_ext as _build_ext\n    else:\n        from distutils.command.build_ext import build_ext as _build_ext\n\n    class cmd_build_ext(_build_ext):\n        def run(self):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_ext.run(self)\n            if self.inplace:\n                return\n            target_versionfile = os.path.join(self.build_lib,\n                                              cfg.versionfile_build)\n            print(\"UPDATING %s\" % target_versionfile)\n            write_to_version_file(target_versionfile, versions)\n    cmds[\"build_ext\"] = cmd_build_ext\n\n    if \"cx_Freeze\" in sys.modules:\n        from cx_Freeze.dist import build_exe as _build_exe\n\n        class cmd_build_exe(_build_exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _build_exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, \"w\") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {\"DOLLAR\": \"$\",\n                             \"STYLE\": cfg.style,\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                             })\n        cmds[\"build_exe\"] = cmd_build_exe\n        del cmds[\"build_py\"]\n\n    if 'py2exe' in sys.modules:\n        from py2exe.distutils_buildexe import py2exe as _py2exe\n\n        class cmd_py2exe(_py2exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _py2exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, \"w\") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {\"DOLLAR\": \"$\",\n                             \"STYLE\": cfg.style,\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                             })\n        cmds[\"py2exe\"] = cmd_py2exe\n\n    if 'sdist' in cmds:\n        _sdist = cmds['sdist']\n    elif \"setuptools\" in sys.modules:\n        from setuptools.command.sdist import sdist as _sdist\n    else:\n        from distutils.command.sdist import sdist as _sdist\n\n    class cmd_sdist(_sdist):\n        def run(self):\n            versions = get_versions()\n            self._versioneer_generated_versions = versions\n            self.distribution.metadata.version = versions[\"version\"]\n            return _sdist.run(self)\n\n        def make_release_tree(self, base_dir, files):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            _sdist.make_release_tree(self, base_dir, files)\n            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)\n            print(\"UPDATING %s\" % target_versionfile)\n            write_to_version_file(target_versionfile,\n                                  self._versioneer_generated_versions)\n    cmds[\"sdist\"] = cmd_sdist\n\n    return cmds\n"
    },
    {
      "id": "smacke_ffsubsync_42_3",
      "input_code": "def test_sync_matches_ground_truth(args, truth, should_detect_encoding):\n    dirpath = tempfile.mkdtemp()\n    try:\n        args.srtout = os.path.join(\n            dirpath, \"test\" + os.path.splitext(args.srtin[0])[-1]\n        )\n        args.skip_ssa_info = True\n        assert ffsubsync.run(args)[\"retval\"] == 0\n        assert timestamps_roughly_match(args.srtout, truth)\n        if should_detect_encoding is not None:\n            assert detected_encoding(args.srtin[0]) == should_detect_encoding\n    finally:\n        shutil.rmtree(dirpath)\n"
    },
    {
      "id": "smacke_ffsubsync_42_1",
      "input_code": "def main() -> int:\n    parser = make_parser()\n    return run(parser)[\"retval\"]\n"
    },
    {
      "id": "smacke_ffsubsync_42_2",
      "input_code": "def main():\n    parser = make_parser()\n    _ = parser.parse_args()\n    add_cli_only_args(parser)\n    args = parser.parse_args()\n    args.gui_mode = True\n    return run(args)\n"
    }
  ],
  "generated_inputs": [
    "```python\n<needimport>\nimport argparse\nfrom typing import Union, Dict, Any\n\n<testcase_1>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input1.srt', 'input2.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--make_test_case', action='store_true')\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_2>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--log_dir_path', default='/logs')\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_3>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--make_test_case', action='store_true')\nparser.add_argument('--log_dir_path', default=None)\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_4>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--skip_ssa_info', action='store_true')\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_5>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--gui_mode', action='store_true')\nargs = parser.parse_args([])\nparser_or_args = args\n```"
  ],
  "gpt_output": "```python\n<needimport>\nimport argparse\nfrom typing import Union, Dict, Any\n\n<testcase_1>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input1.srt', 'input2.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--make_test_case', action='store_true')\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_2>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--log_dir_path', default='/logs')\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_3>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--make_test_case', action='store_true')\nparser.add_argument('--log_dir_path', default=None)\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_4>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--skip_ssa_info', action='store_true')\nargs = parser.parse_args([])\nparser_or_args = args\n\n<testcase_5>\nparser = argparse.ArgumentParser(description=\"Test parser\")\nparser.add_argument('--srtin', nargs='+', default=['input.srt'])\nparser.add_argument('--srtout', default='output.srt')\nparser.add_argument('--gui_mode', action='store_true')\nargs = parser.parse_args([])\nparser_or_args = args\n```",
  "needimport": "import argparse\nfrom typing import Union, Dict, Any\n\n",
  "test_results": {
    "ans1": {
      "retval": 0,
      "offset_seconds": null,
      "framerate_scale_factor": null,
      "sync_was_successful": true
    },
    "ans2": {
      "retval": 0,
      "offset_seconds": null,
      "framerate_scale_factor": null,
      "sync_was_successful": true
    },
    "ans3": {
      "retval": 0,
      "offset_seconds": null,
      "framerate_scale_factor": null,
      "sync_was_successful": true
    },
    "ans4": {
      "retval": 0,
      "offset_seconds": null,
      "framerate_scale_factor": null,
      "sync_was_successful": true
    },
    "ans5": null
  }
}